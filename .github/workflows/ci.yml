name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.13.1
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: TypeScript check
      run: pnpm astro check
      
    - name: Build project
      run: pnpm build
      
    - name: Check potential version bump
      if: github.event_name == 'pull_request'
      id: version-check
      run: |
        # Install semantic-release if not already installed
        npm install -g semantic-release
        
        # Run semantic-release in dry-run mode to see what version would be released
        NEXT_VERSION=$(npx semantic-release --dry-run --no-ci 2>/dev/null | grep -o "The next release version is [0-9.]*" | sed 's/The next release version is //' || echo "no-release")
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        
        # Determine release type
        if [ "$NEXT_VERSION" = "no-release" ]; then
          echo "release-type=none" >> $GITHUB_OUTPUT
          echo "version-message=No version bump - only non-release commits detected" >> $GITHUB_OUTPUT
        else
          # Calculate release type based on version comparison
          if [ "$NEXT_VERSION" != "$CURRENT_VERSION" ]; then
            CURRENT_MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            CURRENT_MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            CURRENT_PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            
            NEXT_MAJOR=$(echo $NEXT_VERSION | cut -d. -f1)
            NEXT_MINOR=$(echo $NEXT_VERSION | cut -d. -f2)
            NEXT_PATCH=$(echo $NEXT_VERSION | cut -d. -f3)
            
            if [ "$NEXT_MAJOR" -gt "$CURRENT_MAJOR" ]; then
              echo "release-type=major" >> $GITHUB_OUTPUT
              echo "version-message=🚨 **MAJOR** release: $CURRENT_VERSION → $NEXT_VERSION (Breaking changes detected)" >> $GITHUB_OUTPUT
            elif [ "$NEXT_MINOR" -gt "$CURRENT_MINOR" ]; then
              echo "release-type=minor" >> $GITHUB_OUTPUT
              echo "version-message=✨ **MINOR** release: $CURRENT_VERSION → $NEXT_VERSION (New features added)" >> $GITHUB_OUTPUT
            elif [ "$NEXT_PATCH" -gt "$CURRENT_PATCH" ]; then
              echo "release-type=patch" >> $GITHUB_OUTPUT
              echo "version-message=🐛 **PATCH** release: $CURRENT_VERSION → $NEXT_VERSION (Bug fixes)" >> $GITHUB_OUTPUT
            else
              echo "release-type=none" >> $GITHUB_OUTPUT
              echo "version-message=No version bump - no release commits detected" >> $GITHUB_OUTPUT
            fi
          else
            echo "release-type=none" >> $GITHUB_OUTPUT
            echo "version-message=No version bump - no release commits detected" >> $GITHUB_OUTPUT
          fi
        fi
      
    - name: Comment version info on PR
      if: github.event_name == 'pull_request' && steps.version-check.outputs.release-type != 'none'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          // Check if bot already commented
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('📦 **Version Impact**')
          );
          
          const commentBody = `## 📦 **Version Impact**
          
          ${{ steps.version-check.outputs.version-message }}
          
          **Current version:** \`v${{ steps.version-check.outputs.current-version }}\`
          **Next version:** \`v${{ steps.version-check.outputs.next-version }}\`
          **Release type:** \`${{ steps.version-check.outputs.release-type }}\`
          
          This PR will trigger a **${{ steps.version-check.outputs.release-type }}** release when merged to main.
          
          ---
          <sub>🤖 This comment is automatically updated by the CI workflow</sub>`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/