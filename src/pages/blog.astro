---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import PageViews from '../components/PageViews.astro';
import RecentPosts from '../components/RecentPosts.astro';
import ReadingTime from '../components/ReadingTime.astro';

const allPosts = await getCollection('blog');
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

// Get all unique tags with counts
const tagCounts: Record<string, number> = {};
allPosts.forEach(post => {
  if (post.data.tags) {
    post.data.tags.forEach(tag => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  }
});

const allTags = Object.keys(tagCounts).sort();
---

<Layout title="Blog">
  <section class="min-h-screen pt-24 px-4 sm:px-6 lg:px-8 bg-white dark:bg-umai-primary">
    <div class="max-w-7xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Main content -->
        <div class="lg:col-span-3">
      <div class="mb-12">
        <h1 class="text-4xl sm:text-5xl font-light text-gray-900 dark:text-white mb-4">
          Our <span class="font-normal text-umai-accent">Blog</span>
        </h1>
        <p class="text-lg text-gray-600 dark:text-gray-400 mb-8">
          Insights on AI, machine learning, and technology trends
        </p>
        
        <!-- Search and filter section -->
        <div class="space-y-4">
          <!-- Search input -->
          <div class="relative">
            <input 
              type="text" 
              id="searchInput"
              placeholder="Search blog posts..."
              class="w-full px-4 py-3 pl-12 bg-white dark:bg-umai-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-umai-accent focus:border-transparent text-gray-900 dark:text-white"
            />
            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          
          <!-- Tag filters -->
          <div class="space-y-2">
            <p class="text-sm font-medium text-gray-700 dark:text-gray-300">Filter by tags:</p>
            <div class="flex flex-wrap gap-2">
              <button 
                class="tag-filter active px-3 py-1 text-xs bg-umai-accent text-white rounded-full hover:bg-umai-accent-dark transition-colors" 
                data-tag=""
              >
                All Posts ({allPosts.length})
              </button>
              {allTags.map((tag) => (
                <button 
                  class="tag-filter px-3 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-full hover:bg-umai-accent hover:text-white transition-colors" 
                  data-tag={tag}
                >
                  {tag} ({tagCounts[tag]})
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
      
      {sortedPosts.length > 0 ? (
        <div class="space-y-8" id="blogPosts">
          {sortedPosts.map((post) => (
            <article 
              class="blog-post group p-6 bg-white dark:bg-umai-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 hover:border-umai-accent/50 dark:hover:border-umai-accent/50 transition-all duration-300"
              data-title={post.data.title.toLowerCase()}
              data-description={post.data.description.toLowerCase()}
              data-tags={post.data.tags ? post.data.tags.join(',').toLowerCase() : ''}
            >
              <div class="flex flex-col space-y-4">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4 flex-wrap">
                    <time class="text-sm text-gray-500 dark:text-gray-400">
                      {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </time>
                    <PageViews slug={post.slug} />
                    <ReadingTime content={post.body} />
                  </div>
                  <span class="text-xs text-umai-accent bg-umai-accent/10 px-2 py-1 rounded-full">
                    {post.data.author}
                  </span>
                </div>
                
                <div>
                  <h2 class="text-xl sm:text-2xl font-medium text-gray-900 dark:text-white mb-3 group-hover:text-umai-accent transition-colors">
                    <a href={`/blog/${post.slug}`} class="hover:underline">
                      {post.data.title}
                    </a>
                  </h2>
                  <p class="text-gray-600 dark:text-gray-400 leading-relaxed">
                    {post.data.description}
                  </p>
                </div>
                
                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map((tag) => (
                      <span class="text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-1 rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                
                <div class="pt-2">
                  <a 
                    href={`/blog/${post.slug}`}
                    class="inline-flex items-center text-sm font-medium text-umai-accent hover:text-umai-accent-dark transition-colors group"
                  >
                    <span>Read more</span>
                    <svg class="ml-2 w-4 h-4 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                    </svg>
                  </a>
                </div>
              </div>
            </article>
          ))}
        </div>
      ) : (
        <div class="text-center py-20">
          <p class="text-gray-500 dark:text-gray-400">No blog posts yet. Check back soon!</p>
        </div>
      )}
        </div>
        
        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-6">
          <div class="sticky top-8">
            <RecentPosts 
              limit={5}
              showDescription={true}
              title="Popular Posts"
            />
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  // Search and filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const tagFilters = document.querySelectorAll('.tag-filter');
    const blogPosts = document.querySelectorAll('.blog-post');
    
    let currentTag = '';
    let currentSearch = '';
    
    // Search functionality
    searchInput?.addEventListener('input', function() {
      currentSearch = (this as HTMLInputElement).value.toLowerCase();
      filterPosts();
    });
    
    // Tag filter functionality
    tagFilters.forEach(filter => {
      filter.addEventListener('click', function(this: HTMLElement) {
        // Remove active class from all filters
        tagFilters.forEach(f => {
          f.classList.remove('active');
          f.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-600', 'dark:text-gray-300');
          f.classList.remove('bg-umai-accent', 'text-white');
        });
        
        // Add active class to clicked filter
        this.classList.add('active');
        this.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-600', 'dark:text-gray-300');
        this.classList.add('bg-umai-accent', 'text-white');
        
        currentTag = this.dataset.tag?.toLowerCase() || '';
        filterPosts();
      });
    });
    
    function filterPosts() {
      blogPosts.forEach(post => {
        const title = (post as HTMLElement).dataset.title || '';
        const description = (post as HTMLElement).dataset.description || '';
        const tags = (post as HTMLElement).dataset.tags || '';
        
        // Check search match
        const searchMatch = !currentSearch || 
          title.includes(currentSearch) || 
          description.includes(currentSearch) ||
          tags.includes(currentSearch);
        
        // Check tag match
        const tagMatch = !currentTag || tags.includes(currentTag);
        
        // Show/hide post
        if (searchMatch && tagMatch) {
          (post as HTMLElement).style.display = 'block';
          (post as HTMLElement).style.opacity = '1';
        } else {
          (post as HTMLElement).style.display = 'none';
          (post as HTMLElement).style.opacity = '0';
        }
      });
      
      // Show/hide no results message
      const visiblePosts = Array.from(blogPosts).filter(post => (post as HTMLElement).style.display !== 'none');
      const blogContainer = document.getElementById('blogPosts');
      let noResultsMsg = document.getElementById('noResultsMsg');
      
      if (visiblePosts.length === 0) {
        if (!noResultsMsg) {
          noResultsMsg = document.createElement('div');
          noResultsMsg.id = 'noResultsMsg';
          noResultsMsg.className = 'text-center py-20';
          noResultsMsg.innerHTML = '<p class="text-gray-500 dark:text-gray-400">No blog posts match your search criteria.</p>';
          blogContainer?.parentNode?.appendChild(noResultsMsg);
        }
        noResultsMsg.style.display = 'block';
      } else {
        if (noResultsMsg) {
          noResultsMsg.style.display = 'none';
        }
      }
    }
  });
</script>