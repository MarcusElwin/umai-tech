---
export interface Props {
  capabilities: Array<{
    number: number;
    title: string;
    description: string;
    example?: string;
    footnote?: string;
    icon?: string;
  }>;
}

const { capabilities } = Astro.props;

function getIcon(iconName?: string) {
  const icons = {
    autonomy: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
    </svg>`,
    planning: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
    </svg>`,
    memory: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
    </svg>`,
    integration: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
    </svg>`,
    default: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
    </svg>`
  };
  return icons[iconName as keyof typeof icons] || icons.default;
}
---

<div class="grid grid-cols-1 md:grid-cols-2 gap-6 my-8">
  {capabilities.map((capability: Props['capabilities'][0]) => (
    <div class="group relative p-6 bg-white dark:bg-umai-gray-800 rounded-xl border border-umai-gray-200 dark:border-umai-gray-700 hover:border-umai-accent/50 transition-all duration-300">
      <div class="absolute inset-0 bg-gradient-to-br from-umai-accent/0 to-umai-accent/0 group-hover:from-umai-accent/5 group-hover:to-umai-accent/10 rounded-xl transition-all duration-300"></div>
      <div class="relative">
        <div class="flex items-start space-x-3 mb-3">
          <div class="text-umai-accent" set:html={getIcon(capability.icon)} />
          <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
            {capability.number}. {capability.title}
          </h4>
        </div>
        <p class="text-sm text-gray-700 dark:text-gray-300 mb-3">
          {capability.description}
        </p>
        {capability.example && (
          <p class="text-sm text-gray-600 dark:text-gray-400 italic">
            Example: {capability.example}{capability.footnote && <sup><a href={`#user-content-fn-${capability.footnote}`} class="text-umai-accent font-medium hover:text-umai-accent/80 transition-colors" data-footnote-ref aria-describedby="footnote-label">{capability.footnote}</a></sup>}
          </p>
        )}
      </div>
    </div>
  ))}
</div>