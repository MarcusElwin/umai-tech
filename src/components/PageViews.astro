---
export interface Props {
  slug: string;
  className?: string;
}

const { slug, className = "" } = Astro.props;
---

<div class={`pageviews ${className}`}>
  <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
    </svg>
    <span id={`views-${slug}`} data-slug={slug}>
      <span class="views-count">---</span> views
    </span>
  </div>
</div>

<script>
  interface ViewsResponse {
    views: number;
    incremented?: boolean;
    rateLimited?: boolean;
  }

  async function initPageViews() {
    // Get all pageview elements
    const pageViewElements = document.querySelectorAll('[data-slug]');
    
    for (const element of pageViewElements) {
      const slug = element.getAttribute('data-slug');
      if (!slug) continue;
      
      const countElement = element.querySelector('.views-count') as HTMLElement;
      if (!countElement) continue;

      try {
        // First, get current view count
        const currentViews = await fetchViews(slug);
        countElement.textContent = currentViews.toLocaleString();
        
        // Check if we've already counted this session
        const sessionKey = `viewed-${slug}`;
        if (!sessionStorage.getItem(sessionKey)) {
          // Increment view count
          const updatedViews = await incrementViews(slug);
          if (updatedViews.incremented) {
            countElement.textContent = updatedViews.views.toLocaleString();
            sessionStorage.setItem(sessionKey, 'true');
          }
        }
      } catch (error) {
        console.error('Failed to fetch/update view count:', error);
        // Fallback to showing "---" or cached count
        countElement.textContent = '---';
      }
    }
  }

  async function fetchViews(slug: string): Promise<number> {
    const response = await fetch(`/api/views?slug=${encodeURIComponent(slug)}`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    const data: ViewsResponse = await response.json();
    return data.views;
  }

  async function incrementViews(slug: string): Promise<ViewsResponse> {
    const response = await fetch(`/api/views?slug=${encodeURIComponent(slug)}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return await response.json();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPageViews);
  } else {
    initPageViews();
  }

  // Also run on navigation for SPA-like behavior
  document.addEventListener('astro:page-load', initPageViews);
</script>

<style>
  .pageviews {
    transition: opacity 0.3s ease;
  }
  
  .views-count {
    font-variant-numeric: tabular-nums;
    min-width: 2ch;
    display: inline-block;
  }
</style>