---
export interface Props {
  title?: string;
  waves: Array<{
    id: string;
    title: string;
    period: string;
    description: string;
    keyPlayers: string[];
    impact: string;
    capabilities: string[];
  }>;
}

const { title = "The Three Waves of AI-Assisted Development", waves } = Astro.props;

// Function to get wave colors
function getWaveColor(waveId: string) {
  const colors = {
    '1': '#8B5CF6', // Umai Purple
    '2': '#3B82F6', // Blue
    '3': '#10B981', // Green
  };
  return colors[waveId as keyof typeof colors] || '#6B7280';
}

// Function to get wave icons
function getWaveIcon(waveId: string) {
  const icons = {
    '1': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>',
    '2': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>',
    '3': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>'
  };
  return icons[waveId as keyof typeof icons] || '<circle cx="12" cy="12" r="3"/>';
}

// Function to get capability icons
function getCapabilityIcon(capability: string) {
  const icons = {
    // Wave 1 - AI Assistants
    'Intelligent code completion': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"/>',
    'Context-aware suggestions': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>',
    'Real-time error detection': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"/>',
    'Enhanced developer workflows': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>',
    
    // Wave 2 - Autonomous Agents
    'Complete autonomous development': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>',
    'Environment setup and configuration': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>',
    'Bug reproduction and fixes': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>',
    'Real job completion on platforms': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 01-2 2H10a2 2 0 01-2-2V6m8 0h2a2 2 0 012 2v6.5"/>',
    
    // Wave 3 - Vibe Coding Platforms
    'Full-stack apps from conversation': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>',
    'Production-ready deployment': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"/>',
    '30-minute learning curve': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>',
    'Non-technical user accessibility': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>'
  };
  return icons[capability as keyof typeof icons] || '<circle cx="12" cy="12" r="2"/>';
}
---

<div class="wave-card-container my-8">
  <!-- Title -->
  {title && (
    <div class="mb-6">
      <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 flex items-center gap-2">
        <div class="w-1 h-5 bg-purple-500 rounded-full"></div>
        {title}
      </h3>
    </div>
  )}

  <!-- Card Container -->
  <div class="wave-card relative overflow-hidden rounded-2xl border border-gray-200/40 bg-gradient-to-br from-white via-gray-50/50 to-white dark:from-gray-900 dark:via-gray-800/50 dark:to-gray-900 dark:border-gray-700/30 shadow-lg backdrop-blur-sm hover:shadow-xl transition-all duration-300">
    
    <!-- Tab Content -->
    <div class="tab-content">
      {waves.map((wave: any, index: number) => (
        <div 
          class={`wave-content p-8 ${index === 0 ? 'block' : 'hidden'}`}
          data-wave={wave.id}
        >
          <!-- Header -->
          <div class="mb-8">
            <div class="flex items-center gap-4 mb-4">
              <div class="flex items-center justify-center w-16 h-16 rounded-2xl text-white shadow-xl" style={`background: linear-gradient(135deg, ${getWaveColor(wave.id)}, ${getWaveColor(wave.id)}cc)`}>
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <Fragment set:html={getWaveIcon(wave.id)} />
                </svg>
              </div>
              <div>
                <h4 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-1">{wave.title}</h4>
                <p class="text-gray-600 dark:text-gray-400 font-medium text-lg">{wave.period}</p>
              </div>
            </div>
            
            <p class="text-gray-700 dark:text-gray-300 leading-relaxed text-lg">{wave.description}</p>
          </div>

          <div class="grid md:grid-cols-2 gap-8">
            <!-- Key Players -->
            <div class="bg-gradient-to-br from-blue-50/60 to-blue-100/40 dark:from-blue-900/20 dark:to-blue-800/10 p-6 rounded-xl border border-blue-200/50 dark:border-blue-700/30">
              <h5 class="text-sm font-bold text-blue-700 dark:text-blue-300 uppercase tracking-wide mb-4 flex items-center gap-2">
                <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                </svg>
                Key Players
              </h5>
              <div class="flex flex-wrap gap-2">
                {wave.keyPlayers.map((player: string) => (
                  <span class="inline-flex items-center px-4 py-2 rounded-lg text-sm font-semibold bg-white/80 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 border border-blue-200/60 dark:border-blue-700/40 shadow-sm hover:shadow-md transition-shadow hover:bg-white dark:hover:bg-blue-900/50">
                    {player}
                  </span>
                ))}
              </div>
            </div>

            <!-- Capabilities -->
            <div class="bg-gradient-to-br from-emerald-50/60 to-emerald-100/40 dark:from-emerald-900/20 dark:to-emerald-800/10 p-6 rounded-xl border border-emerald-200/50 dark:border-emerald-700/30">
              <h5 class="text-sm font-bold text-emerald-700 dark:text-emerald-300 uppercase tracking-wide mb-4 flex items-center gap-2">
                <svg class="w-4 h-4 text-emerald-600 dark:text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                Capabilities
              </h5>
              <ul class="space-y-3">
                {wave.capabilities.map((capability: string) => (
                  <li class="flex items-start gap-3 text-sm text-emerald-800 dark:text-emerald-200">
                    <div class="flex items-center justify-center w-8 h-8 rounded-lg shadow-sm mt-0.5" style={`background: linear-gradient(135deg, ${getWaveColor(wave.id)}20, ${getWaveColor(wave.id)}10)`}>
                      <svg class="w-4 h-4" style={`color: ${getWaveColor(wave.id)}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <Fragment set:html={getCapabilityIcon(capability)} />
                      </svg>
                    </div>
                    <span class="font-medium leading-relaxed">{capability}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <!-- Impact -->
          <div class="mt-8">
            <div class="p-6 rounded-xl border border-gray-200/40 dark:border-gray-700/30 bg-gradient-to-br from-gray-50/80 to-white dark:from-gray-800/40 dark:to-gray-700/20 shadow-sm">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-3">
                  <div class="flex items-center justify-center w-10 h-10 rounded-lg" style={`background-color: ${getWaveColor(wave.id)}20`}>
                    <svg class="w-5 h-5" style={`color: ${getWaveColor(wave.id)}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                    </svg>
                  </div>
                  <span class="text-sm font-bold text-gray-600 dark:text-gray-400 uppercase tracking-wide">Impact</span>
                </div>
                <span class="text-xl font-bold" style={`color: ${getWaveColor(wave.id)}`}>{wave.impact}</span>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Tab Navigation - Bottom -->
    <div class="border-t border-gray-200/50 dark:border-gray-700/50 bg-gray-50/30 dark:bg-gray-800/30 p-6">
      <div class="flex items-center justify-center gap-4">
        {waves.map((wave: any, index: number) => (
          <button 
            class={`wave-tab group flex items-center gap-3 px-4 py-2 rounded-lg transition-all duration-200 ${index === 0 ? 'bg-white dark:bg-gray-700 shadow-sm' : 'hover:bg-white/50 dark:hover:bg-gray-700/50'}`}
            data-wave={wave.id}
            data-index={index}
          >
            <!-- Wave Number -->
            <div class={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold transition-all duration-200 ${index === 0 ? 'text-white' : 'text-gray-400 dark:text-gray-500'}`} 
                 style={index === 0 ? `background-color: ${getWaveColor(wave.id)}` : 'background-color: transparent; border: 2px solid currentColor'}>
              {wave.id}
            </div>
            
            <!-- Wave Title -->
            <span class={`text-sm font-medium transition-all duration-200 ${index === 0 ? 'text-gray-900 dark:text-gray-100' : 'text-gray-600 dark:text-gray-400'}`}>
              <span class="hidden sm:inline">{wave.title}</span>
              <span class="sm:hidden">Wave {wave.id}</span>
            </span>
          </button>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  // Tab functionality
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.wave-tab') as NodeListOf<HTMLButtonElement>;
    const contents = document.querySelectorAll('.wave-content') as NodeListOf<HTMLElement>;
    
    tabs.forEach((tab: HTMLButtonElement) => {
      tab.addEventListener('click', function() {
        const targetWave = this.getAttribute('data-wave');
        
        // Update tab states
        tabs.forEach((t: HTMLButtonElement) => {
          // Reset button background
          t.classList.remove('bg-white', 'dark:bg-gray-700', 'shadow-sm');
          
          // Reset text colors
          const titleSpan = t.querySelector('span');
          if (titleSpan) {
            titleSpan.classList.remove('text-gray-900', 'dark:text-gray-100');
            titleSpan.classList.add('text-gray-600', 'dark:text-gray-400');
          }
          
          // Reset wave number
          const waveNumber = t.querySelector('.w-6.h-6');
          if (waveNumber) {
            waveNumber.classList.remove('text-white');
            waveNumber.classList.add('text-gray-400', 'dark:text-gray-500');
            (waveNumber as HTMLElement).style.backgroundColor = 'transparent';
            (waveNumber as HTMLElement).style.border = '2px solid currentColor';
          }
        });
        
        // Activate current tab
        const targetWaveId = this.getAttribute('data-wave');
        this.classList.add('bg-white', 'dark:bg-gray-700', 'shadow-sm');
        
        // Update title text
        const titleSpan = this.querySelector('span');
        if (titleSpan) {
          titleSpan.classList.remove('text-gray-600', 'dark:text-gray-400');
          titleSpan.classList.add('text-gray-900', 'dark:text-gray-100');
        }
        
        // Update wave number
        const waveNumber = this.querySelector('.w-6.h-6');
        if (waveNumber) {
          waveNumber.classList.remove('text-gray-400', 'dark:text-gray-500');
          waveNumber.classList.add('text-white');
          
          const waveColors = {
            '1': '#8B5CF6',
            '2': '#3B82F6', 
            '3': '#10B981'
          };
          const waveColor = waveColors[targetWaveId as keyof typeof waveColors] || '#8B5CF6';
          (waveNumber as HTMLElement).style.backgroundColor = waveColor;
          (waveNumber as HTMLElement).style.border = 'none';
        }
        
        // Update content visibility with fade animation
        contents.forEach((content: HTMLElement) => {
          content.style.opacity = '0';
          setTimeout(() => {
            content.classList.add('hidden');
            content.classList.remove('block');
          }, 150);
        });
        
        // Show target content
        const targetContent = document.querySelector(`[data-wave="${targetWave}"].wave-content`) as HTMLElement;
        if (targetContent) {
          setTimeout(() => {
            targetContent.classList.remove('hidden');
            targetContent.classList.add('block');
            setTimeout(() => {
              targetContent.style.opacity = '1';
            }, 50);
          }, 150);
        }
      });
    });
    
    // Add smooth transitions
    contents.forEach((content: HTMLElement) => {
      content.style.transition = 'opacity 0.2s ease-in-out';
      content.style.opacity = '1';
    });
  });
</script>