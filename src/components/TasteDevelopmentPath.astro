---
export interface Props {
  steps: Array<{
    id: string;
    title: string;
    description: string;
    methods: string[];
    outcome: string;
    icon: string;
    color: string;
    timeframe: string;
  }>;
}

const { steps } = Astro.props;

// Function to get color styles
function getColorStyle(color: string) {
  const colors = {
    blue: { 
      bg: 'bg-blue-50 dark:bg-blue-950/30', 
      border: 'border-blue-200 dark:border-blue-800/40',
      iconBg: 'bg-blue-500',
      text: 'text-blue-700 dark:text-blue-300'
    },
    green: { 
      bg: 'bg-green-50 dark:bg-green-950/30', 
      border: 'border-green-200 dark:border-green-800/40',
      iconBg: 'bg-green-500',
      text: 'text-green-700 dark:text-green-300'
    },
    purple: { 
      bg: 'bg-purple-50 dark:bg-purple-950/30', 
      border: 'border-purple-200 dark:border-purple-800/40',
      iconBg: 'bg-purple-500',
      text: 'text-purple-700 dark:text-purple-300'
    },
    orange: { 
      bg: 'bg-orange-50 dark:bg-orange-950/30', 
      border: 'border-orange-200 dark:border-orange-800/40',
      iconBg: 'bg-orange-500',
      text: 'text-orange-700 dark:text-orange-300'
    }
  };
  return colors[color as keyof typeof colors] || colors['blue'];
}
---

<div class="taste-development-path my-8">
  <!-- Header -->
  <div class="bg-gradient-to-r from-umai-gray-50 to-white dark:from-umai-gray-800 dark:to-umai-gray-700 rounded-xl border border-umai-gray-200 dark:border-umai-gray-600 p-4 mb-6">
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1">
        <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">The Taste Development Framework</h4>
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">4-step progression from technical focus to user-centered thinking</p>
        
        <!-- Collapse Toggle -->
        <button 
          id="path-toggle" 
          class="flex items-center space-x-2 text-sm text-umai-accent hover:text-umai-accent/80 transition-colors focus:outline-none"
          aria-expanded="false"
          aria-controls="path-content"
        >
          <span id="path-toggle-text">Show Framework</span>
          <svg id="path-toggle-icon" class="w-4 h-4 transition-transform duration-200 rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
          </svg>
        </button>
      </div>
      
      <!-- Timeline indicator -->
      <div class="text-xs text-gray-500 dark:text-gray-400 text-right">
        <div class="font-medium">Progressive Development</div>
        <div class="text-gray-400">~3-6 months per step</div>
      </div>
    </div>
  </div>

  <!-- Collapsible Content -->
  <div id="path-content" class="hidden transition-all duration-300 ease-in-out overflow-hidden">
    <div class="space-y-4">
      {steps.map((step, index) => {
        const colorStyle = getColorStyle(step.color);
        const isLast = index === steps.length - 1;
        
        return (
          <div class="relative">
            <div class={`step-card ${colorStyle.bg} ${colorStyle.border} border rounded-lg p-4 shadow-sm hover:shadow-md transition-all duration-200`}>
              
              <!-- Step indicator and connection line -->
              <div class="flex items-start gap-4">
                <!-- Step number with icon -->
                <div class="flex flex-col items-center">
                  <div class={`w-10 h-10 rounded-full ${colorStyle.iconBg} flex items-center justify-center text-white font-bold text-sm shadow-md`}>
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <Fragment set:html={step.icon} />
                    </svg>
                  </div>
                  {!isLast && (
                    <div class="w-px h-8 bg-gray-300 dark:bg-gray-600 mt-2"></div>
                  )}
                </div>
                
                <!-- Content -->
                <div class="flex-1 min-w-0">
                  <!-- Header -->
                  <div class="flex items-start justify-between mb-2">
                    <div>
                      <h5 class="font-semibold text-gray-900 dark:text-gray-100 text-sm">{step.title}</h5>
                      <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">{step.description}</p>
                    </div>
                    <div class={`px-2 py-1 rounded-full ${colorStyle.bg} ${colorStyle.border} border`}>
                      <span class={`text-xs font-medium ${colorStyle.text}`}>{step.timeframe}</span>
                    </div>
                  </div>
                  
                  <!-- Methods -->
                  <div class="mb-3">
                    <h6 class="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1.5 flex items-center gap-1">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                      </svg>
                      Practice Methods:
                    </h6>
                    <div class="grid grid-cols-1 gap-1">
                      {step.methods.slice(0, 2).map((method: string) => (
                        <div class="flex items-start gap-2 text-xs">
                          <div class={`w-1 h-1 rounded-full mt-1.5 flex-shrink-0 ${colorStyle.iconBg}`}></div>
                          <span class="text-gray-600 dark:text-gray-400 leading-tight">{method}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <!-- Outcome -->
                  <div class="bg-white/60 dark:bg-gray-800/30 rounded-md p-2">
                    <div class="flex items-start gap-2">
                      <svg class="w-3 h-3 text-green-600 dark:text-green-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                      </svg>
                      <div>
                        <span class="text-xs font-medium text-gray-700 dark:text-gray-300">Outcome: </span>
                        <span class="text-xs text-gray-600 dark:text-gray-400">{step.outcome}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</div>

<script>
  function initTasteDevelopmentPath() {
    const toggle = document.getElementById('path-toggle');
    const content = document.getElementById('path-content');
    const icon = document.getElementById('path-toggle-icon');
    const text = document.getElementById('path-toggle-text');
    
    if (!toggle || !content || !icon || !text) return;
    
    let isExpanded = false;
    
    toggle.addEventListener('click', () => {
      isExpanded = !isExpanded;
      
      if (isExpanded) {
        content.classList.remove('hidden');
        content.style.maxHeight = content.scrollHeight + 'px';
        icon.style.transform = 'rotate(0deg)';
        text.textContent = 'Hide Framework';
        toggle.setAttribute('aria-expanded', 'true');
      } else {
        content.style.maxHeight = '0px';
        icon.style.transform = 'rotate(180deg)';
        text.textContent = 'Show Framework';
        toggle.setAttribute('aria-expanded', 'false');
        
        setTimeout(() => {
          content.classList.add('hidden');
        }, 300);
      }
    });
  }
  
  // Initialize on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTasteDevelopmentPath);
  } else {
    initTasteDevelopmentPath();
  }
  
  // Re-initialize on navigation (for SPAs)
  (globalThis as any).initTasteDevelopmentPath = initTasteDevelopmentPath;
</script>

<style>
  .step-card {
    transition: all 0.2s ease;
  }
  
  .step-card:hover {
    transform: translateY(-1px);
  }
  
  #path-content {
    transition: max-height 0.3s ease-out;
  }
</style>