---
export interface Props {
  studies: Array<{
    title: string;
    description?: string;
    winner: {
      name: string;
      approach: string;
      metrics: Array<{
        label: string;
        value: string;
        iconType?: 'money' | 'users' | 'growth' | 'star' | 'lightning' | 'heart' | 'refresh' | 'rocket' | 'chart';
      }>;
      keyInsights: string[];
      color?: 'green' | 'blue' | 'purple';
    };
    traditional: {
      name: string;
      approach: string;
      issues: string[];
      results: string[];
    };
  }>;
}

const { studies } = Astro.props;

// Generate unique ID for this component instance
const componentId = `case-study-${Math.random().toString(36).slice(2, 11)}`;
---

<div class="case-study-comparison my-12">
  <!-- Header -->
  <div class="bg-gradient-to-r from-umai-gray-50 to-white dark:from-umai-gray-800 dark:to-umai-gray-700 rounded-xl border border-umai-gray-200 dark:border-umai-gray-600 p-6 mb-6">
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1">
        <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-2">Business Case Studies</h4>
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          Real-world examples of how taste-driven decisions create massive business value
        </p>
        
        <!-- Collapse Toggle -->
        <button 
          id={`${componentId}-toggle`}
          class="flex items-center space-x-2 text-sm text-umai-accent hover:text-umai-accent/80 transition-colors focus:outline-none"
          aria-expanded="false"
          aria-controls={`${componentId}-content`}
        >
          <span id={`${componentId}-toggle-text`}>Show Case Studies</span>
          <svg id={`${componentId}-toggle-icon`} class="w-4 h-4 transition-transform duration-200 rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
          </svg>
        </button>
      </div>
      
      <!-- Legend -->
      <div class="flex items-center gap-4 shrink-0 text-sm">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded bg-orange-100 border border-orange-300"></div>
          <span class="text-gray-700 dark:text-gray-300">Traditional Approach</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 rounded bg-green-100 border border-green-300"></div>
          <span class="text-gray-700 dark:text-gray-300">Taste-Driven Winner</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Collapsible Content -->
  <div id={`${componentId}-content`} class="hidden transition-all duration-300 ease-in-out overflow-hidden">
    <div class="space-y-12">
  {studies.map((study, index) => {
    const winnerColor = study.winner.color || 'green';
    const colorClasses = {
      green: {
        bg: 'bg-green-50 dark:bg-green-950/30',
        border: 'border-green-200 dark:border-green-800/40',
        headerBg: 'bg-green-100 dark:bg-green-900/50',
        headerText: 'text-green-800 dark:text-green-300',
        iconColor: 'text-green-600 dark:text-green-400'
      },
      blue: {
        bg: 'bg-blue-50 dark:bg-blue-950/30',
        border: 'border-blue-200 dark:border-blue-800/40',
        headerBg: 'bg-blue-100 dark:bg-blue-900/50',
        headerText: 'text-blue-800 dark:text-blue-300',
        iconColor: 'text-blue-600 dark:text-blue-400'
      },
      purple: {
        bg: 'bg-purple-50 dark:bg-purple-950/30',
        border: 'border-purple-200 dark:border-purple-800/40',
        headerBg: 'bg-purple-100 dark:bg-purple-900/50',
        headerText: 'text-purple-800 dark:text-purple-300',
        iconColor: 'text-purple-600 dark:text-purple-400'
      }
    };
    
    const colors = colorClasses[winnerColor];
    
    return (
      <div class="case-study">
        {/* Study Header */}
        <div class="mb-8">
          <div class="flex items-start gap-4">
            <div class="flex items-center justify-center w-10 h-10 rounded-full bg-gradient-to-br from-umai-accent/20 to-umai-accent/30 flex-shrink-0">
              <span class="text-lg font-bold text-umai-accent">{index + 1}</span>
            </div>
            <div>
              <h4 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">{study.title}</h4>
              {study.description && (
                <p class="text-gray-600 dark:text-gray-400 leading-relaxed">{study.description}</p>
              )}
            </div>
          </div>
        </div>

        {/* Comparison Grid */}
        <div class="grid lg:grid-cols-2 gap-8">
          
          {/* Winner Card */}
          <div class={`${colors.bg} ${colors.border} border-2 rounded-xl overflow-hidden shadow-lg`}>
            <div class={`${colors.headerBg} px-6 py-4 ${colors.border} border-b`}>
              <div class="flex items-center gap-3">
                <svg class={`w-6 h-6 ${colors.iconColor}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                <div>
                  <h5 class={`text-xl font-bold ${colors.headerText}`}>{study.winner.name}</h5>
                  <p class={`text-sm ${colors.headerText} opacity-90`}>Taste-Driven Approach</p>
                </div>
              </div>
            </div>
            
            <div class="p-6 space-y-6">
              {/* Approach */}
              <div>
                <h6 class="font-semibold text-gray-900 dark:text-gray-100 mb-2">Strategy:</h6>
                <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">{study.winner.approach}</p>
              </div>

              {/* Metrics */}
              <div>
                <h6 class="font-semibold text-gray-900 dark:text-gray-100 mb-3">Results:</h6>
                <div class="space-y-3">
                  {study.winner.metrics.map((metric: any) => {
                    const getIcon = (iconType?: string) => {
                      const iconClass = `w-5 h-5 ${colors.iconColor}`;
                      switch (iconType) {
                        case 'money':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/></svg>;
                        case 'users':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/></svg>;
                        case 'growth':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/></svg>;
                        case 'star':
                          return <svg class={iconClass} fill="currentColor" viewBox="0 0 24 24"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>;
                        case 'lightning':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/></svg>;
                        case 'heart':
                          return <svg class={iconClass} fill="currentColor" viewBox="0 0 24 24"><path d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"/></svg>;
                        case 'refresh':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/></svg>;
                        case 'rocket':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.5 2c2.2 0 4.1.5 5.7 1.5 1.6 1 2.8 2.4 3.7 4.1.4.9.6 1.8.6 2.9s-.2 2.1-.6 3c-.9 1.7-2.1 3.1-3.7 4.1-1.6 1-3.5 1.5-5.7 1.5s-4.1-.5-5.7-1.5c-1.6-1-2.8-2.4-3.7-4.1-.4-.9-.6-1.8-.6-2.9s.2-2.1.6-3c.9-1.7 2.1-3.1 3.7-4.1 1.6-1 3.5-1.5 5.7-1.5z"/></svg>;
                        case 'chart':
                          return <svg class={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/></svg>;
                        default:
                          return <div class={`w-2 h-2 rounded-full bg-gradient-to-r from-${winnerColor}-400 to-${winnerColor}-600`}></div>;
                      }
                    };
                    
                    return (
                      <div class="flex items-center gap-3">
                        {getIcon(metric.iconType)}
                        <div class="flex-1">
                          <div class="flex items-baseline gap-2">
                            <span class="font-bold text-lg text-gray-900 dark:text-gray-100">{metric.value}</span>
                            <span class="text-sm text-gray-600 dark:text-gray-400">{metric.label}</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Key Insights */}
              <div>
                <h6 class="font-semibold text-gray-900 dark:text-gray-100 mb-3">Key Insights:</h6>
                <ul class="space-y-2">
                  {study.winner.keyInsights.map((insight) => (
                    <li class="flex items-start gap-2 text-sm text-gray-700 dark:text-gray-300">
                      <svg class={`w-4 h-4 mt-0.5 flex-shrink-0 ${colors.iconColor}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                      </svg>
                      <span>{insight}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {/* Traditional Approach Card */}
          <div class="bg-orange-50 dark:bg-orange-950/30 border-2 border-orange-200 dark:border-orange-800/40 rounded-xl overflow-hidden">
            <div class="bg-orange-100 dark:bg-orange-900/50 px-6 py-4 border-b border-orange-200 dark:border-orange-800/40">
              <div class="flex items-center gap-3">
                <svg class="w-6 h-6 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                </svg>
                <div>
                  <h5 class="text-xl font-bold text-orange-800 dark:text-orange-300">{study.traditional.name}</h5>
                  <p class="text-sm text-orange-800 dark:text-orange-300 opacity-90">Traditional Approach</p>
                </div>
              </div>
            </div>
            
            <div class="p-6 space-y-6">
              {/* Approach */}
              <div>
                <h6 class="font-semibold text-gray-900 dark:text-gray-100 mb-2">Strategy:</h6>
                <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">{study.traditional.approach}</p>
              </div>

              {/* Issues */}
              <div>
                <h6 class="font-semibold text-gray-900 dark:text-gray-100 mb-3">Challenges:</h6>
                <ul class="space-y-2">
                  {study.traditional.issues.map((issue) => (
                    <li class="flex items-start gap-2 text-sm text-gray-700 dark:text-gray-300">
                      <svg class="w-4 h-4 mt-0.5 flex-shrink-0 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                      </svg>
                      <span>{issue}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Results */}
              <div>
                <h6 class="font-semibold text-gray-900 dark:text-gray-100 mb-3">Outcome:</h6>
                <ul class="space-y-2">
                  {study.traditional.results.map((result) => (
                    <li class="flex items-start gap-2 text-sm text-gray-700 dark:text-gray-300">
                      <div class="w-1.5 h-1.5 rounded-full bg-orange-400 mt-2 flex-shrink-0"></div>
                      <span>{result}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Bottom separator for multiple studies */}
        {index < studies.length - 1 && (
          <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700"></div>
        )}
      </div>
    );
  })}
    </div>
  </div>
</div>

<script is:inline define:vars={{ componentId }}>
  (function() {
    const currentComponentId = componentId;
    console.log('🔍 Initializing CaseStudyComparison for:', currentComponentId);
    
    function initThisCaseStudy() {
      const toggle = document.getElementById(`${currentComponentId}-toggle`);
      const content = document.getElementById(`${currentComponentId}-content`);
      const icon = document.getElementById(`${currentComponentId}-toggle-icon`);
      const text = document.getElementById(`${currentComponentId}-toggle-text`);
      
      console.log('🎯 Elements for', currentComponentId, ':', { toggle: !!toggle, content: !!content, icon: !!icon, text: !!text });
      
      if (!toggle || !content || !icon || !text) {
        console.log('❌ Missing elements for', currentComponentId, ', retrying...');
        setTimeout(initThisCaseStudy, 100);
        return;
      }
      
      console.log('✅ All elements found for', currentComponentId, ', adding click listener');
      
      let isExpanded = false;
      
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('🖱️ Toggle clicked for', currentComponentId, '! Current state:', isExpanded);
        isExpanded = !isExpanded;
        
        if (isExpanded) {
          console.log('📖 Expanding content for', currentComponentId);
          content.classList.remove('hidden');
          content.style.maxHeight = content.scrollHeight + 'px';
          icon.style.transform = 'rotate(0deg)';
          text.textContent = 'Hide Case Studies';
          toggle.setAttribute('aria-expanded', 'true');
        } else {
          console.log('📕 Collapsing content for', currentComponentId);
          content.style.maxHeight = '0px';
          icon.style.transform = 'rotate(180deg)';
          text.textContent = 'Show Case Studies';
          toggle.setAttribute('aria-expanded', 'false');
          
          setTimeout(() => {
            content.classList.add('hidden');
          }, 300);
        }
      });
      
      console.log('🎉 CaseStudyComparison initialized successfully for', currentComponentId);
    }
    
    // Multiple initialization strategies
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initThisCaseStudy);
    } else {
      initThisCaseStudy();
    }
    
    // Also try after a delay to catch any dynamic loading
    setTimeout(initThisCaseStudy, 100);
  })();
</script>

<style>
  .case-study {
    position: relative;
  }
  
  .case-study-comparison {
    scroll-margin-top: 2rem;
  }
  
  /* Ensure proper color classes are available */
  .from-green-400 { --tw-gradient-from: #4ade80; }
  .to-green-600 { --tw-gradient-to: #16a34a; }
  .from-blue-400 { --tw-gradient-from: #60a5fa; }
  .to-blue-600 { --tw-gradient-to: #2563eb; }
  .from-purple-400 { --tw-gradient-from: #a78bfa; }
  .to-purple-600 { --tw-gradient-to: #9333ea; }
</style>