---
export interface Props {
  title: string;
  count?: string;
  defaultOpen?: boolean;
  class?: string;
}

const { title, count, defaultOpen = false, class: className = '' } = Astro.props;
const uniqueId = `collapsible-${Math.random().toString(36).substring(2, 11)}`;
---

<div class={`footnotes-collapsible ${className}`}>
  <button 
    type="button"
    class="footnotes-toggle"
    aria-expanded={defaultOpen}
    aria-controls={uniqueId}
    data-target={uniqueId}
  >
    <svg class="toggle-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 12L10 8L6 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <span class="toggle-title">{title}</span>
    {count && <span class="toggle-count">{count}</span>}
  </button>
  
  <div 
    id={uniqueId}
    class={`footnotes-content ${defaultOpen ? 'open' : ''}`}
    aria-hidden={!defaultOpen}
  >
    <slot />
  </div>
</div>

<script define:vars={{ uniqueId, defaultOpen }} is:inline>
  // Use a more reliable approach for MDX content
  function initializeCollapsible() {
    const button = document.querySelector(`[data-target="${uniqueId}"]`);
    const content = document.getElementById(uniqueId);
    
    if (!button || !content) return;
    
    // Set initial state
    if (!defaultOpen) {
      content.style.display = 'none';
    }
    
    button.addEventListener('click', function() {
      const isOpen = this.getAttribute('aria-expanded') === 'true';
      
      // Toggle states
      this.setAttribute('aria-expanded', !isOpen);
      content.setAttribute('aria-hidden', isOpen);
      
      if (isOpen) {
        // Closing
        content.style.display = 'none';
        this.classList.remove('open');
      } else {
        // Opening
        content.style.display = 'block';
        this.classList.add('open');
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCollapsible);
  } else {
    initializeCollapsible();
  }
</script>

<style>
  .footnotes-collapsible {
    @apply mt-8 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-900/50;
  }

  .footnotes-toggle {
    @apply w-full flex items-center p-4 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800/50 transition-colors duration-200;
    @apply text-lg font-semibold text-gray-800 dark:text-gray-200 text-left border-none bg-transparent;
    @apply focus:outline-none focus:ring-2 focus:ring-umai-primary focus:ring-inset;
  }

  .toggle-icon {
    @apply mr-3 text-umai-primary transition-transform duration-200 flex-shrink-0;
  }

  .footnotes-toggle.open .toggle-icon {
    transform: rotate(90deg);
  }

  .toggle-title {
    @apply flex-grow text-gray-800 dark:text-gray-200;
  }

  .toggle-count {
    @apply text-sm text-gray-600 dark:text-gray-400 font-normal ml-2;
  }

  .footnotes-content {
    @apply px-4 pb-4;
  }

  /* Ensure proper styling for footnote content */
  .footnotes-content :global(p) {
    @apply mb-3 text-sm text-gray-700 dark:text-gray-300;
  }

  .footnotes-content :global(a) {
    @apply text-umai-primary hover:text-umai-primary/80 underline;
  }

  .footnotes-content :global(sup) {
    @apply text-umai-primary font-semibold;
  }
</style>