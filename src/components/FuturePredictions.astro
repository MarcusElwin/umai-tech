---
export interface Props {
  phases: Array<{
    id: string;
    timeframe: string;
    title: string;
    subtitle: string;
    marketValue: string;
    adoptionRate: string;
    keyInsights: Array<{
      title: string;
      description: string;
      icon: string;
    }>;
    metrics: Array<{
      label: string;
      value: string;
      trend: 'up' | 'stable' | 'down';
    }>;
    color: string;
  }>;
}

const { phases } = Astro.props;
---

<div class="my-12">
  <!-- Header -->
  <div class="text-center mb-12">
    <h3 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">The Three Waves of Agentic Commerce</h3>
    <p class="text-lg text-gray-600 dark:text-gray-400 max-w-4xl mx-auto">
      The transformation from experimental implementations to a fully autonomous commerce ecosystem will unfold in three distinct phases, each building upon the infrastructure and adoption patterns of the previous wave.
    </p>
  </div>

  <!-- Timeline Container -->
  <div class="relative max-w-4xl mx-auto">
    <!-- Progress Line -->
    <div class="absolute left-6 top-0 bottom-0 w-0.5 bg-gradient-to-b from-umai-accent via-blue-500 to-green-500 opacity-30 hidden md:block"></div>
    
    <!-- Phases -->
    <div class="space-y-8">
      {phases.map((phase, index) => (
        <div class="relative">
          <!-- Timeline Dot -->
          <div class="absolute left-4 top-6 w-4 h-4 rounded-full border-4 border-white dark:border-gray-900 shadow-lg hidden md:block z-10" 
               style={`background-color: ${phase.color}`}></div>
          
          <!-- Phase Card -->
          <div class="md:ml-16">
            <div class="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all duration-300">
              
              <!-- Main Card Content -->
              <div class="p-6 cursor-pointer" data-phase={phase.id}>
                <!-- Header -->
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center space-x-3">
                    <!-- Phase Icon -->
                    <div class="w-10 h-10 rounded-2xl flex items-center justify-center" style={`background: linear-gradient(135deg, ${phase.color}20, ${phase.color}10)`}>
                      {index === 0 && (
                        <!-- Foundation Phase: Building blocks icon -->
                        <svg class="w-5 h-5" style={`color: ${phase.color}`} fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2L2 7v10c0 5.55 3.84 9.739 9 11 5.16-1.261 9-5.45 9-11V7l-10-5z"/>
                          <path d="M9 12l2 2 4-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      )}
                      {index === 1 && (
                        <!-- Acceleration Phase: Rocket/growth icon -->
                        <svg class="w-5 h-5" style={`color: ${phase.color}`} fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/>
                        </svg>
                      )}
                      {index === 2 && (
                        <!-- New Normal Phase: AI/automation icon -->
                        <svg class="w-5 h-5" style={`color: ${phase.color}`} fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 1L21.5 6.5v11L12 23l-9.5-5.5v-11L12 1zm0 2.311L4.5 7.653v8.694L12 20.689l7.5-4.342V7.653L12 3.311z"/>
                          <circle cx="12" cy="8" r="1.5"/>
                          <circle cx="8" cy="12" r="1.5"/>
                          <circle cx="16" cy="12" r="1.5"/>
                          <circle cx="12" cy="16" r="1.5"/>
                          <path d="M12 8v4m-4 0h8m-6.83 2L12 16m0 0l2.83-2" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round"/>
                        </svg>
                      )}
                    </div>
                    <div class="flex flex-col">
                      <div class="px-3 py-1 rounded-full text-xs font-medium text-white mb-1" style={`background-color: ${phase.color}`}>
                        {phase.timeframe}
                      </div>
                      <span class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Phase {index + 1}
                      </span>
                    </div>
                  </div>
                  <button class="expand-button text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors" 
                          data-target={phase.id}>
                    <svg class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                    </svg>
                  </button>
                </div>

                <!-- Title and Subtitle -->
                <h4 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">{phase.title}</h4>
                <p class="text-gray-600 dark:text-gray-400 mb-6">{phase.subtitle}</p>

                <!-- Key Metrics Grid -->
                <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
                  <div class="text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                    <div class="text-xl font-bold" style={`color: ${phase.color}`}>{phase.marketValue}</div>
                    <div class="text-xs text-gray-600 dark:text-gray-400 mt-1">Market Value</div>
                  </div>
                  <div class="text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                    <div class="text-xl font-bold" style={`color: ${phase.color}`}>{phase.adoptionRate}</div>
                    <div class="text-xs text-gray-600 dark:text-gray-400 mt-1">Adoption Rate</div>
                  </div>
                  {phase.metrics.slice(0, 2).map((metric) => (
                    <div class="text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                      <div class="text-lg font-bold text-gray-900 dark:text-white flex items-center justify-center space-x-1">
                        <span>{metric.value}</span>
                        {metric.trend === 'up' && (
                          <svg class="w-3 h-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                          </svg>
                        )}
                      </div>
                      <div class="text-xs text-gray-600 dark:text-gray-400 mt-1">{metric.label}</div>
                    </div>
                  ))}
                </div>
              </div>

              <!-- Expandable Details -->
              <div class="expandable-content hidden border-t border-gray-200 dark:border-gray-700" id={`details-${phase.id}`}>
                <div class="p-6">
                  <!-- Key Insights -->
                  <h5 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Key Developments & Implications</h5>
                  <div class="grid md:grid-cols-2 gap-4 mb-6">
                    {phase.keyInsights.map((insight) => (
                      <div class="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-xl">
                        <div class="flex items-start space-x-3">
                          <div class="flex-shrink-0 w-6 h-6 rounded-lg flex items-center justify-center" style={`background-color: ${phase.color}20`}>
                            <svg class="w-3 h-3" style={`color: ${phase.color}`} fill="currentColor" viewBox="0 0 24 24">
                              {insight.icon === 'infrastructure' && (
                                <path d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h-5m9 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1"/>
                              )}
                              {insight.icon === 'agents' && (
                                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                              )}
                              {insight.icon === 'ecosystem' && (
                                <path d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                              )}
                              {insight.icon === 'commerce' && (
                                <path d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17M17 13v4a2 2 0 01-2 2H9a2 2 0 01-2-2v-4m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"/>
                              )}
                              {insight.icon === 'intelligence' && (
                                <path d="M13 10V3L4 14h7v7l9-11h-7z"/>
                              )}
                              {insight.icon === 'automation' && (
                                <path d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0 1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                              )}
                            </svg>
                          </div>
                          <div class="flex-1">
                            <h6 class="text-sm font-semibold text-gray-900 dark:text-white mb-1">{insight.title}</h6>
                            <p class="text-xs text-gray-600 dark:text-gray-400 leading-relaxed">{insight.description}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <!-- Additional Metrics -->
                  {phase.metrics.length > 2 && (
                    <div>
                      <h5 class="text-sm font-semibold text-gray-900 dark:text-white mb-3">Additional Metrics</h5>
                      <div class="grid sm:grid-cols-2 gap-3">
                        {phase.metrics.slice(2).map((metric) => (
                          <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                            <span class="text-sm text-gray-700 dark:text-gray-300 font-medium">{metric.label}</span>
                            <div class="flex items-center space-x-2">
                              <span class="text-sm font-semibold text-gray-900 dark:text-white">{metric.value}</span>
                              {metric.trend === 'up' && (
                                <svg class="w-3 h-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                                </svg>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  // Add click handlers for expandable cards
  function initializeExpandableCards() {
    const expandButtons = document.querySelectorAll('.expand-button');
    const cardHeaders = document.querySelectorAll('[data-phase]');
    
    function toggleCard(targetId: string) {
      const content = document.getElementById(`details-${targetId}`);
      const button = document.querySelector(`[data-target="${targetId}"]`);
      const svg = button?.querySelector('svg');
      
      if (content && button && svg) {
        if (content.classList.contains('hidden')) {
          content.classList.remove('hidden');
          svg.style.transform = 'rotate(180deg)';
        } else {
          content.classList.add('hidden');
          svg.style.transform = 'rotate(0deg)';
        }
      }
    }
    
    expandButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        const targetId = button.getAttribute('data-target');
        if (targetId) toggleCard(targetId);
      });
    });
    
    cardHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const phaseId = header.getAttribute('data-phase');
        if (phaseId) toggleCard(phaseId);
      });
    });
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeExpandableCards);
  
  // Re-initialize if content is dynamically loaded
  if (typeof window !== 'undefined') {
    (window as any).initializeExpandableCards = initializeExpandableCards;
  }
</script>

<style>
  /* Smooth transitions for expand/collapse */
  .expandable-content {
    transition: all 0.3s ease-in-out;
  }
  
  .expand-button svg {
    transition: transform 0.2s ease-in-out;
  }
  
  /* Timeline dot pulse animation */
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.1);
      opacity: 0.8;
    }
  }
  
  .relative .absolute {
    animation: pulse 3s ease-in-out infinite;
  }
  
  /* Hover effects */
  [data-phase]:hover {
    cursor: pointer;
  }
</style>