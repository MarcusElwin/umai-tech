---
export interface Props {
  pillars: Array<{
    id: string;
    title: string;
    description: string;
    examples: string[];
    icon: string;
    color: string;
    importance: 'foundation' | 'core' | 'advanced';
  }>;
}

const { pillars } = Astro.props;

// Function to get pillar styling based on importance
function getImportanceStyle(importance: string) {
  const styles = {
    foundation: {
      ring: 'ring-4 ring-orange-200 dark:ring-orange-800/40',
      bg: 'bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/30 dark:to-orange-900/20',
      border: 'border-orange-300 dark:border-orange-700',
      badge: 'bg-orange-600 text-white',
      priority: 'Critical'
    },
    core: {
      ring: 'ring-3 ring-blue-200 dark:ring-blue-800/40',
      bg: 'bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/30 dark:to-blue-900/20',
      border: 'border-blue-300 dark:border-blue-700',
      badge: 'bg-blue-500 text-white',
      priority: 'High'
    },
    advanced: {
      ring: 'ring-2 ring-green-200 dark:ring-green-800/40',
      bg: 'bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/30 dark:to-green-900/20',
      border: 'border-green-300 dark:border-green-700',
      badge: 'bg-green-500 text-white',
      priority: 'Medium'
    }
  };
  return styles[importance as keyof typeof styles] || styles['core'];
}

// Function to get color styles
function getColorStyle(color: string) {
  const colors = {
    red: { icon: 'text-orange-600 dark:text-orange-400', iconBg: 'bg-orange-600' },
    blue: { icon: 'text-blue-600 dark:text-blue-400', iconBg: 'bg-blue-500' },
    green: { icon: 'text-green-600 dark:text-green-400', iconBg: 'bg-green-500' },
    purple: { icon: 'text-purple-600 dark:text-purple-400', iconBg: 'bg-purple-500' },
    orange: { icon: 'text-orange-600 dark:text-orange-400', iconBg: 'bg-orange-500' }
  };
  return colors[color as keyof typeof colors] || colors['blue'];
}
---

<div class="taste-pillars my-12">
  <!-- Header -->
  <div class="bg-gradient-to-r from-umai-gray-50 to-white dark:from-umai-gray-800 dark:to-umai-gray-700 rounded-xl border border-umai-gray-200 dark:border-umai-gray-600 p-6 mb-6">
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1">
        <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-2">The Five Pillars of Software Taste</h4>
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          In the vibe coding era, these human judgment skills become the primary differentiators
        </p>
        
        <!-- Collapse Toggle -->
        <button 
          id="pillars-toggle" 
          class="flex items-center space-x-2 text-sm text-umai-accent hover:text-umai-accent/80 transition-colors focus:outline-none"
          aria-expanded="false"
          aria-controls="pillars-content"
        >
          <span id="pillars-toggle-text">Show Details</span>
          <svg id="pillars-toggle-icon" class="w-4 h-4 transition-transform duration-200 rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
          </svg>
        </button>
      </div>
      
      <!-- Priority Legend -->
      <div class="flex items-center gap-2 shrink-0">
        <div class="text-xs text-gray-500 dark:text-gray-400 mr-2">Priority:</div>
        <div class="flex items-center gap-1.5">
          <div class="w-3 h-3 rounded-full bg-orange-600"></div>
          <span class="text-xs text-gray-600 dark:text-gray-400">Critical</span>
        </div>
        <div class="flex items-center gap-1.5">
          <div class="w-3 h-3 rounded-full bg-blue-500"></div>
          <span class="text-xs text-gray-600 dark:text-gray-400">High</span>
        </div>
        <div class="flex items-center gap-1.5">
          <div class="w-3 h-3 rounded-full bg-green-500"></div>
          <span class="text-xs text-gray-600 dark:text-gray-400">Medium</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Collapsible Content -->
  <div id="pillars-content" class="hidden transition-all duration-300 ease-in-out overflow-hidden">
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      {pillars.map((pillar: any) => {
        const importanceStyle = getImportanceStyle(pillar.importance);
        const colorStyle = getColorStyle(pillar.color);
        
        return (
          <div class={`pillar-card ${importanceStyle.bg} ${importanceStyle.border} ${importanceStyle.ring} border rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 relative`}>
            
            <!-- Priority Badge -->
            <div class={`absolute -top-2 -right-2 ${importanceStyle.badge} text-xs font-bold px-2 py-1 rounded-full shadow-lg`}>
              {importanceStyle.priority}
            </div>

            <!-- Icon and Title -->
            <div class="flex items-center gap-3 mb-4">
              <div class={`w-12 h-12 rounded-xl ${colorStyle.iconBg} flex items-center justify-center shadow-md`}>
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <Fragment set:html={pillar.icon} />
                </svg>
              </div>
              <div>
                <h5 class="font-bold text-lg text-gray-900 dark:text-gray-100">{pillar.title}</h5>
                <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide font-medium">
                  Pillar {pillars.indexOf(pillar) + 1}
                </div>
              </div>
            </div>

            <!-- Description -->
            <p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-4 text-sm">
              {pillar.description}
            </p>

            <!-- Examples -->
            <div class="space-y-2">
              <h6 class="text-sm font-semibold text-gray-800 dark:text-gray-200 flex items-center gap-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                </svg>
                Key Examples:
              </h6>
              <div class="space-y-1">
                <div class={`examples-visible-${pillar.id}`}>
                  {pillar.examples.slice(0, 3).map((example: string) => (
                    <div class="flex items-start gap-2 text-xs">
                      <div class={`w-1.5 h-1.5 rounded-full mt-1.5 flex-shrink-0 ${colorStyle.iconBg}`}></div>
                      <span class="text-gray-600 dark:text-gray-400 leading-tight">{example}</span>
                    </div>
                  ))}
                </div>
                {pillar.examples.length > 3 && (
                  <>
                    <div class={`examples-hidden-${pillar.id} hidden space-y-1`}>
                      {pillar.examples.slice(3).map((example: string) => (
                        <div class="flex items-start gap-2 text-xs">
                          <div class={`w-1.5 h-1.5 rounded-full mt-1.5 flex-shrink-0 ${colorStyle.iconBg}`}></div>
                          <span class="text-gray-600 dark:text-gray-400 leading-tight">{example}</span>
                        </div>
                      ))}
                    </div>
                    <button 
                      class={`examples-toggle-${pillar.id} text-xs text-gray-500 dark:text-gray-500 italic hover:text-gray-700 dark:hover:text-gray-300 cursor-pointer transition-colors border-none bg-transparent p-0`}
                      onclick={`toggleExamples('${pillar.id}')`}
                    >
                      <span class={`show-more-${pillar.id}`}>+{pillar.examples.length - 3} more examples</span>
                      <span class={`show-less-${pillar.id} hidden`}>Show less</span>
                    </button>
                  </>
                )}
              </div>
            </div>
          </div>
        );
      })}
    </div>
    
    <!-- Foundation Note -->
    <div class="mt-6 p-4 bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800/40 rounded-lg">
      <div class="flex items-start gap-3">
        <svg class="w-5 h-5 text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <div class="text-sm">
          <p class="text-amber-800 dark:text-amber-200 font-medium mb-1">Development Priority</p>
          <p class="text-amber-700 dark:text-amber-300 leading-relaxed">
            Start with <strong>Critical</strong> pillars as they provide the foundation for all other taste development. 
            <strong>High</strong> priority skills amplify your impact, while <strong>Medium</strong> priority areas help you stand out from other AI-assisted developers.
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function initTastePillars() {
    const toggle = document.getElementById('pillars-toggle');
    const content = document.getElementById('pillars-content');
    const icon = document.getElementById('pillars-toggle-icon');
    const text = document.getElementById('pillars-toggle-text');
    
    if (!toggle || !content || !icon || !text) return;
    
    let isExpanded = false;
    
    toggle.addEventListener('click', () => {
      isExpanded = !isExpanded;
      
      if (isExpanded) {
        content.classList.remove('hidden');
        content.style.maxHeight = content.scrollHeight + 'px';
        icon.style.transform = 'rotate(0deg)';
        text.textContent = 'Hide Details';
        toggle.setAttribute('aria-expanded', 'true');
      } else {
        content.style.maxHeight = '0px';
        icon.style.transform = 'rotate(180deg)';
        text.textContent = 'Show Details';
        toggle.setAttribute('aria-expanded', 'false');
        
        setTimeout(() => {
          content.classList.add('hidden');
        }, 300);
      }
    });
  }
  
  // Initialize on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTastePillars);
  } else {
    initTastePillars();
  }
  
  // Re-initialize on navigation (for SPAs)
  (globalThis as any).initTastePillars = initTastePillars;
  
  // Toggle examples function
  function toggleExamples(pillarId: string) {
    const hiddenExamples = document.querySelector(`.examples-hidden-${pillarId}`);
    const showMore = document.querySelector(`.show-more-${pillarId}`);
    const showLess = document.querySelector(`.show-less-${pillarId}`);
    
    if (hiddenExamples && showMore && showLess) {
      const isHidden = hiddenExamples.classList.contains('hidden');
      
      if (isHidden) {
        hiddenExamples.classList.remove('hidden');
        showMore.classList.add('hidden');
        showLess.classList.remove('hidden');
      } else {
        hiddenExamples.classList.add('hidden');
        showMore.classList.remove('hidden');
        showLess.classList.add('hidden');
      }
    }
  }
  
  (globalThis as any).toggleExamples = toggleExamples;
</script>

<style>
  .pillar-card {
    transition: all 0.3s ease;
  }
  
  .pillar-card:hover {
    transform: translateY(-4px);
  }
  
  #pillars-content {
    transition: max-height 0.3s ease-out;
  }
</style>