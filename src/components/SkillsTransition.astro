---
export interface Props {
  skillCategories: Array<{
    category: 'declining' | 'increasing' | 'future-critical';
    title: string;
    skills: Array<{
      name: string;
      description: string;
      trend: string;
      importance: 'low' | 'medium' | 'high' | 'critical';
    }>;
  }>;
}

const { skillCategories } = Astro.props;

// Function to get category colors and icons
function getCategoryStyle(category: string) {
  const styles = {
    'declining': {
      color: '#F97316',
      bgColor: 'bg-orange-50/30 dark:bg-orange-950/20',
      borderColor: 'border-orange-200/40 dark:border-orange-800/30',
      textColor: 'text-orange-700 dark:text-orange-300',
      icon: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7-7m0 0l-7 7m7-7v18"/>',
      iconBg: 'bg-orange-500'
    },
    'increasing': {
      color: '#10B981', 
      bgColor: 'bg-green-50/30 dark:bg-green-950/20',
      borderColor: 'border-green-200/40 dark:border-green-800/30',
      textColor: 'text-green-700 dark:text-green-300',
      icon: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>',
      iconBg: 'bg-green-500'
    },
    'future-critical': {
      color: '#8B5CF6',
      bgColor: 'bg-purple-50/30 dark:bg-purple-950/20',
      borderColor: 'border-purple-200/40 dark:border-purple-800/30',
      textColor: 'text-purple-700 dark:text-purple-300',
      icon: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>',
      iconBg: 'bg-purple-500'
    }
  };
  return styles[category as keyof typeof styles] || styles['increasing'];
}

---

<div class="skills-transition my-8">
  <!-- Condensed Header -->
  <div class="bg-gradient-to-r from-umai-gray-50 to-white dark:from-umai-gray-800 dark:to-umai-gray-700 rounded-xl border border-umai-gray-200 dark:border-umai-gray-600 p-4 mb-4">
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1">
        <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">Skills Transition in the Vibe Coding Era</h4>
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">Technical skills decline while human judgment becomes critical</p>
        
        <!-- Collapse Toggle -->
        <button 
          id="skills-toggle" 
          class="flex items-center space-x-2 text-sm text-umai-accent hover:text-umai-accent/80 transition-colors focus:outline-none"
          aria-expanded="false"
          aria-controls="skills-content"
        >
          <span id="skills-toggle-text">Show Details</span>
          <svg id="skills-toggle-icon" class="w-4 h-4 transition-transform duration-200 rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
          </svg>
        </button>
      </div>
      
      <!-- Quick Summary -->
      <div class="flex items-center gap-2 shrink-0">
        <div class="flex items-center gap-1.5 px-2 py-1 rounded-md bg-orange-50 dark:bg-orange-950/30 border border-orange-200/40 dark:border-orange-800/30">
          <div class="w-2 h-2 rounded-full bg-orange-500"></div>
          <span class="text-xs font-medium text-orange-700 dark:text-orange-300">Declining</span>
        </div>
        <div class="flex items-center gap-1.5 px-2 py-1 rounded-md bg-green-50 dark:bg-green-950/30 border border-green-200/40 dark:border-green-800/30">
          <div class="w-2 h-2 rounded-full bg-green-500"></div>
          <span class="text-xs font-medium text-green-700 dark:text-green-300">Rising</span>
        </div>
        <div class="flex items-center gap-1.5 px-2 py-1 rounded-md bg-purple-50 dark:bg-purple-950/30 border border-purple-200/40 dark:border-purple-800/30">
          <div class="w-2 h-2 rounded-full bg-purple-500"></div>
          <span class="text-xs font-medium text-purple-700 dark:text-purple-300">Critical</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Collapsible Content -->
  <div id="skills-content" class="hidden transition-all duration-300 ease-in-out overflow-hidden">
    <div class="grid md:grid-cols-3 gap-4">
      {skillCategories.map((category: any) => {
        const style = getCategoryStyle(category.category);
        return (
          <div class={`skill-category-card ${style.bgColor} ${style.borderColor} border rounded-lg overflow-hidden shadow-sm`}>
            <!-- Compact Category Header -->
            <div class="p-3 border-b border-gray-200/30 dark:border-gray-700/30">
              <div class="flex items-center gap-2">
                <div class={`w-6 h-6 rounded ${style.iconBg} flex items-center justify-center`}>
                  <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <Fragment set:html={style.icon} />
                  </svg>
                </div>
                <div>
                  <h4 class={`font-semibold text-sm ${style.textColor}`}>{category.title}</h4>
                </div>
              </div>
            </div>

            <!-- Compact Skills List -->
            <div class="p-3 space-y-2">
              {category.skills.map((skill: any) => (
                <div class="skill-item bg-white/40 dark:bg-gray-800/30 rounded p-2 text-xs">
                  <div class="flex items-start justify-between gap-2">
                    <div class="flex-1">
                      <h5 class="font-medium text-gray-900 dark:text-gray-100 mb-1">{skill.name}</h5>
                      <p class="text-gray-600 dark:text-gray-400 leading-tight text-xs">{skill.description}</p>
                    </div>
                    <div class={`w-2 h-2 rounded-full flex-shrink-0 mt-1 ${
                      skill.importance === 'critical' ? 'bg-orange-600' :
                      skill.importance === 'high' ? 'bg-orange-500' :
                      skill.importance === 'medium' ? 'bg-yellow-500' : 'bg-gray-400'
                    }`} title={`${skill.importance} importance`}></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        );
      })}
    </div>
    
    <!-- Compact Legend -->
    <div class="mt-4 p-3 bg-gray-50/30 dark:bg-gray-800/30 rounded-lg border border-gray-200/40 dark:border-gray-700/30">
      <div class="flex items-center justify-between text-xs">
        <div class="flex items-center gap-3">
          <span class="text-gray-600 dark:text-gray-400">Importance:</span>
          <div class="flex items-center gap-2">
            <div class="flex items-center gap-1"><div class="w-2 h-2 rounded-full bg-gray-400"></div><span class="text-gray-500">Low</span></div>
            <div class="flex items-center gap-1"><div class="w-2 h-2 rounded-full bg-yellow-500"></div><span class="text-gray-500">Medium</span></div>
            <div class="flex items-center gap-1"><div class="w-2 h-2 rounded-full bg-orange-500"></div><span class="text-gray-500">High</span></div>
            <div class="flex items-center gap-1"><div class="w-2 h-2 rounded-full bg-orange-600"></div><span class="text-gray-500">Critical</span></div>
          </div>
        </div>
        <span class="text-gray-400">Analysis based on 2025 market trends</span>
      </div>
    </div>
  </div>
</div>

<script>
  function initSkillsTransition() {
    const toggle = document.getElementById('skills-toggle');
    const content = document.getElementById('skills-content');
    const icon = document.getElementById('skills-toggle-icon');
    const text = document.getElementById('skills-toggle-text');
    
    if (!toggle || !content || !icon || !text) return;
    
    let isExpanded = false;
    
    toggle.addEventListener('click', () => {
      isExpanded = !isExpanded;
      
      if (isExpanded) {
        content.classList.remove('hidden');
        content.style.maxHeight = content.scrollHeight + 'px';
        icon.style.transform = 'rotate(0deg)';
        text.textContent = 'Hide Details';
        toggle.setAttribute('aria-expanded', 'true');
      } else {
        content.style.maxHeight = '0px';
        icon.style.transform = 'rotate(180deg)';
        text.textContent = 'Show Details';
        toggle.setAttribute('aria-expanded', 'false');
        
        setTimeout(() => {
          content.classList.add('hidden');
        }, 300);
      }
    });
  }
  
  // Initialize on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSkillsTransition);
  } else {
    initSkillsTransition();
  }
  
  // Re-initialize on navigation (for SPAs)
  (globalThis as any).initSkillsTransition = initSkillsTransition;
</script>

<style>
  .skill-category-card {
    transition: all 0.2s ease;
  }
  
  .skill-item {
    transition: all 0.15s ease;
  }
  
  .skill-item:hover {
    background-color: rgba(255, 255, 255, 0.6);
  }
  
  .dark .skill-item:hover {
    background-color: rgba(31, 41, 55, 0.5);
  }
  
  #skills-content {
    transition: max-height 0.3s ease-out;
  }
</style>