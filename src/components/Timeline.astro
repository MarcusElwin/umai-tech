---
export interface Props {
  title?: string;
  events: Array<{
    date: string;
    event: string;
    segment: string;
    source?: string;
    sourceUrl?: string;
  }>;
}

const { title, events } = Astro.props;

// Function to format date for display
function formatDate(dateStr: string) {
  const date = new Date(dateStr);
  const options: Intl.DateTimeFormatOptions = { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  };
  return date.toLocaleDateString('en-US', options);
}

// Function to get segment color and icon
function getSegmentColor(segment: string) {
  const colors = {
    'Payments': '#8B5CF6', // Umai Purple
    'AI Platform': '#3B82F6', // Blue
    'Marketplace': '#10B981', // Green
    'Regulation': '#F59E0B', // Orange
    'Startup/Payments': '#EC4899', // Pink
    'Acquirer': '#6366F1', // Indigo
  };
  return colors[segment as keyof typeof colors] || '#6B7280';
}

function getSegmentIcon(segment: string) {
  const icons = {
    'Payments': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>',
    'AI Platform': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>',
    'Marketplace': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>',
    'Regulation': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>',
    'Startup/Payments': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>',
    'Acquirer': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>'
  };
  return icons[segment as keyof typeof icons] || '<circle cx="12" cy="12" r="3"/>';
}
---

<div class="timeline-container my-8">
  {title && (
    <div class="mb-6">
      <div 
        class="flex items-center justify-between cursor-pointer p-3 rounded-lg hover:bg-gray-50/50 dark:hover:bg-gray-800/50 transition-colors group"
        onclick="toggleTimeline()"
      >
        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200 flex items-center gap-3">
          <div class="w-1 h-6 bg-purple-500 rounded-full"></div>
          {title}
        </h3>
        <div class="flex items-center gap-3">
          <!-- Summary stats -->
          <div class="hidden sm:flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
            <span class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded text-xs">
              {events.length} events
            </span>
            <span class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded text-xs">
              {Array.from(new Set(events.map(e => e.segment))).length} segments
            </span>
          </div>
          <!-- Collapse/Expand icon -->
          <svg 
            class="w-5 h-5 text-gray-400 transition-transform duration-200 timeline-collapse-icon" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </div>
      </div>
    </div>
  )}
  
  <!-- Collapsible timeline content -->
  <div class="timeline-content transition-all duration-300 ease-in-out">
  
  <!-- Segment Filter -->
  <div class="mb-6">
    <div class="bg-gradient-to-br from-white via-gray-50/50 to-gray-100/30 dark:from-gray-800/40 dark:via-gray-800/60 dark:to-gray-700/40 rounded-xl border border-gray-200/60 dark:border-gray-700/50 shadow-sm backdrop-blur-sm">
      <!-- Header with title and stats -->
      <div class="flex items-center justify-between px-4 py-3 border-b border-gray-200/50 dark:border-gray-700/50">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
          </svg>
          <span class="text-sm font-semibold text-gray-700 dark:text-gray-300">Filter Timeline</span>
        </div>
        <div class="flex items-center gap-3">
          <span class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100/80 dark:bg-gray-700/80 px-2.5 py-1 rounded-full font-medium">
            {events.length} events
          </span>
          <div class="flex items-center gap-1">
            {Array.from(new Set(events.map(e => e.segment))).map(segment => (
              <div 
                class="w-2 h-2 rounded-full"
                style={`background-color: ${getSegmentColor(segment)}`}
                title={segment}
              ></div>
            ))}
          </div>
        </div>
      </div>
      
      <!-- Filter buttons -->
      <div class="p-4">
        <div class="flex flex-wrap items-center gap-2">
          <button 
            class="filter-btn active px-4 py-2 text-sm font-semibold rounded-full transition-all duration-200 bg-gradient-to-r from-purple-500 to-purple-600 text-white shadow-sm hover:shadow-md hover:from-purple-600 hover:to-purple-700 border border-purple-500/20"
            data-filter="all"
            onclick="filterEvents('all')"
          >
            <div class="flex items-center gap-2">
              <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
              </svg>
              <span>All ({events.length})</span>
            </div>
          </button>
          
          {Array.from(new Set(events.map(e => e.segment))).map(segment => (
            <button 
              class="filter-btn px-3.5 py-2 text-sm font-medium rounded-full transition-all duration-200 text-gray-700 dark:text-gray-300 hover:text-white hover:shadow-md flex items-center gap-2 border"
              style={`background: linear-gradient(135deg, ${getSegmentColor(segment)}08, ${getSegmentColor(segment)}15); border-color: ${getSegmentColor(segment)}25; hover:background: ${getSegmentColor(segment)}; hover:border-color: ${getSegmentColor(segment)}`}
              data-filter={segment.toLowerCase().replace(/[^a-z0-9]/g, '-')}
              onclick={`filterEvents('${segment.toLowerCase().replace(/[^a-z0-9]/g, '-')}')`}
            >
              <div class="flex items-center gap-2">
                <div 
                  class="w-2 h-2 rounded-full flex-shrink-0"
                  style={`background-color: ${getSegmentColor(segment)}`}
                ></div>
                <svg class="w-3 h-3 opacity-70" fill="none" stroke="currentColor" viewBox="0 0 24 24" style={`color: ${getSegmentColor(segment)}`}>
                  <Fragment set:html={getSegmentIcon(segment)} />
                </svg>
                <span class="whitespace-nowrap">{segment}</span>
                <span 
                  class="text-xs px-1.5 py-0.5 rounded-full text-white font-medium ml-1"
                  style={`background-color: ${getSegmentColor(segment)}`}
                >
                  {events.filter(e => e.segment === segment).length}
                </span>
              </div>
            </button>
          ))}
        </div>
        
        <!-- Quick stats row -->
        <div class="mt-3 pt-3 border-t border-gray-200/40 dark:border-gray-700/40 flex flex-wrap items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
          <div class="flex items-center gap-1">
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
            </svg>
            <span>Most active: <strong class="text-gray-700 dark:text-gray-300">{Array.from(new Set(events.map(e => e.segment))).sort((a, b) => events.filter(e => e.segment === b).length - events.filter(e => e.segment === a).length)[0]}</strong></span>
          </div>
          <div class="flex items-center gap-1">
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
            <span>Timespan: <strong class="text-gray-700 dark:text-gray-300">Jan - Jul 2025</strong></span>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="relative">
    <!-- Clean timeline line -->
    <div class="absolute left-6 top-0 bottom-0 w-0.5 bg-gradient-to-b from-purple-500 via-purple-400 to-purple-300 opacity-60"></div>
    
    <div class="space-y-6">
      {events.map((event) => (
        <div 
          class="relative flex items-start group timeline-event" 
          data-segment={event.segment.toLowerCase().replace(/[^a-z0-9]/g, '-')}
        >
          <!-- Timeline dot with icon -->
          <div 
            class="flex-shrink-0 w-12 h-12 rounded-full border-3 border-white dark:border-gray-800 shadow-lg flex items-center justify-center relative z-10 transition-all duration-300 group-hover:scale-110"
            style={`background: linear-gradient(135deg, ${getSegmentColor(event.segment)}, ${getSegmentColor(event.segment)}dd)`}
          >
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <Fragment set:html={getSegmentIcon(event.segment)} />
            </svg>
          </div>
          
          <!-- Event content -->
          <div class="ml-5 pb-6 flex-1">
            <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-all duration-300 p-5 group-hover:border-purple-300 dark:group-hover:border-purple-600">
              <!-- Date and segment -->
              <div class="flex items-center justify-between mb-3">
                <time class="text-sm font-semibold text-purple-600 dark:text-purple-400">
                  {formatDate(event.date)}
                </time>
                <span 
                  class="px-2.5 py-1 rounded-full text-xs font-medium text-white"
                  style={`background-color: ${getSegmentColor(event.segment)}`}
                >
                  {event.segment}
                </span>
              </div>
              
              <!-- Event description -->
              <p class="text-gray-800 dark:text-gray-200 leading-relaxed text-sm mb-4">
                {event.event}
              </p>
              
              <!-- Source -->
              {event.source && (
                <div class="text-xs text-gray-500 dark:text-gray-400 border-t border-gray-100 dark:border-gray-700 pt-3">
                  <span class="font-medium">Source: </span>
                  {event.sourceUrl ? (
                    <a 
                      href={event.sourceUrl} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 underline transition-colors"
                    >
                      {event.source}
                    </a>
                  ) : (
                    <span>{event.source}</span>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  </div> <!-- End timeline-content -->
</div>

<style>
  .timeline-container {
    max-width: 100%;
  }
  
  @media (max-width: 768px) {
    .timeline-container .relative {
      margin-left: -1rem;
    }
    
    .timeline-container .ml-6 {
      margin-left: 1rem;
    }
    
    .timeline-container .absolute.left-6 {
      left: 1.5rem;
    }
  }
  
  /* Enhanced animations */
  .timeline-container .group:hover .bg-gradient-to-br {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px -5px rgba(139, 92, 246, 0.1), 0 10px 10px -5px rgba(139, 92, 246, 0.04);
  }
  
  /* Timeline line gradient animation */
  @keyframes shimmer {
    0% { transform: translateY(-100%); }
    100% { transform: translateY(100vh); }
  }
  
  .timeline-container .animate-pulse {
    animation: shimmer 4s ease-in-out infinite;
  }
  
  /* Segment icon animations */
  .timeline-container .group:hover svg {
    filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.3));
  }
  
  /* Stagger animation for timeline items */
  .timeline-container .group {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }
  
  .timeline-container .group:nth-child(1) { animation-delay: 0.1s; }
  .timeline-container .group:nth-child(2) { animation-delay: 0.15s; }
  .timeline-container .group:nth-child(3) { animation-delay: 0.2s; }
  .timeline-container .group:nth-child(4) { animation-delay: 0.25s; }
  .timeline-container .group:nth-child(5) { animation-delay: 0.3s; }
  .timeline-container .group:nth-child(6) { animation-delay: 0.35s; }
  .timeline-container .group:nth-child(7) { animation-delay: 0.4s; }
  .timeline-container .group:nth-child(8) { animation-delay: 0.45s; }
  .timeline-container .group:nth-child(9) { animation-delay: 0.5s; }
  .timeline-container .group:nth-child(10) { animation-delay: 0.55s; }
  .timeline-container .group:nth-child(11) { animation-delay: 0.6s; }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Improved responsive behavior */
  /* Filter functionality */
  .timeline-event.hidden {
    display: none;
  }
  
  .filter-btn.active {
    background: linear-gradient(135deg, #8B5CF6, #7C3AED) !important;
    color: white !important;
    border-color: #7C3AED !important;
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3) !important;
    transform: scale(1.02);
  }
  
  .filter-btn.active:hover {
    box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4) !important;
    transform: scale(1.05);
  }
  
  /* Enhanced filter button hover effects */
  .filter-btn:hover {
    transform: translateY(-1px) scale(1.02);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  .filter-btn:not(.active):hover .opacity-70 {
    opacity: 1;
  }
  
  /* Stats section styling */
  .timeline-container .bg-gradient-to-br {
    background-attachment: fixed;
  }
  
  /* Timeline collapse/expand functionality */
  .timeline-content {
    max-height: 5000px;
    overflow: hidden;
    opacity: 1;
  }
  
  .timeline-content.collapsed {
    max-height: 0;
    opacity: 0;
    margin: 0;
    padding: 0;
  }
  
  .timeline-collapse-icon {
    transition: transform 0.2s ease;
  }
  
  .timeline-collapse-icon.rotated {
    transform: rotate(-180deg);
  }
  
  /* Header hover effect */
  .timeline-container .group:hover .timeline-collapse-icon {
    color: #8B5CF6;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .timeline-container .group:hover .bg-white {
      transform: none;
    }
    
    .timeline-container .ml-5 {
      margin-left: 1rem;
    }
    
    .timeline-container .flex-wrap {
      gap: 0.5rem;
    }
    
    .timeline-container .filter-btn {
      font-size: 0.75rem;
      padding: 0.375rem 0.75rem;
    }
  }
</style>

<script>
  function filterEvents(segment: string) {
    const allEvents = document.querySelectorAll('.timeline-event');
    const allButtons = document.querySelectorAll('.filter-btn');
    
    // Remove active class from all buttons
    allButtons.forEach(btn => btn.classList.remove('active'));
    
    // Add active class to clicked button
    const clickedButton = document.querySelector(`[data-filter="${segment}"]`);
    if (clickedButton) {
      clickedButton.classList.add('active');
    }
    
    // Show/hide events based on filter
    allEvents.forEach(event => {
      const eventSegment = event.getAttribute('data-segment');
      const htmlElement = event as HTMLElement;
      
      if (segment === 'all' || eventSegment === segment) {
        event.classList.remove('hidden');
        // Re-trigger animation
        htmlElement.style.animation = 'none';
        htmlElement.offsetHeight; // Trigger reflow
        htmlElement.style.animation = 'fadeInUp 0.4s ease-out forwards';
      } else {
        event.classList.add('hidden');
      }
    });
    
    // Update timeline line visibility
    updateTimelineLine();
  }
  
  function updateTimelineLine() {
    const visibleEvents = document.querySelectorAll('.timeline-event:not(.hidden)');
    const timelineLine = document.querySelector('.timeline-container .absolute');
    
    if (visibleEvents.length === 0) {
      timelineLine?.classList.add('opacity-0');
    } else {
      timelineLine?.classList.remove('opacity-0');
    }
  }
  
  function toggleTimeline() {
    const content = document.querySelector('.timeline-content');
    const icon = document.querySelector('.timeline-collapse-icon');
    
    if (content && icon) {
      if (content.classList.contains('collapsed')) {
        content.classList.remove('collapsed');
        icon.classList.remove('rotated');
      } else {
        content.classList.add('collapsed');
        icon.classList.add('rotated');
      }
    }
  }
  
  // Make functions globally accessible
  (globalThis as any).filterEvents = filterEvents;
  (globalThis as any).toggleTimeline = toggleTimeline;
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Set initial filter state
    updateTimelineLine();
  });
  
  // Re-initialize on Astro page navigation
  document.addEventListener('astro:page-load', function() {
    updateTimelineLine();
  });
</script>

