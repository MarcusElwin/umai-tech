---
export interface Props {
  companies: Array<{
    id: string;
    name: string;
    category: string;
    maturity: number; // 1-10 scale
    scope: number; // 1-10 scale  
    size: number; // Market influence/funding
    description: string;
    keyMetrics: string[];
    founded?: string;
    funding?: string;
    status: 'pilot' | 'production' | 'scale';
  }>;
}

const { companies } = Astro.props;




---

<div class="my-12">
  <!-- Header -->
  <div class="text-center mb-8">
    <h4 class="text-2xl font-semibold text-gray-900 dark:text-white mb-3">Agentic Commerce Strategic Positioning Matrix</h4>
    <p class="text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
      Companies positioned by market maturity and capability scope in the agentic commerce landscape. Click any company to explore their approach.
    </p>
    <p class="text-xs text-gray-500 dark:text-gray-500 mt-2 italic">Based on the author's analysis</p>
  </div>

  <!-- Filters -->
  <div class="mb-6 flex flex-wrap gap-3 justify-center">
    <button id="filter-all" class="filter-btn active px-4 py-2 rounded-full text-sm font-medium bg-umai-accent text-white hover:bg-umai-accent/80 transition-colors">
      All Companies
    </button>
    <button id="filter-payments" class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
      Payment Giants
    </button>
    <button id="filter-marketplaces" class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
      Marketplaces
    </button>
    <button id="filter-browsers" class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
      Browsers/Agents
    </button>
    <button id="filter-startups" class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
      Startups
    </button>
    <button id="filter-checkout" class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
      Checkout
    </button>
  </div>

  <!-- Chart Container with 4-Cell Matrix -->
  <div class="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-4 pb-1">
    <div id="competitive-landscape-chart" class="w-full h-[480px] flex justify-center relative">
      <!-- Matrix will be dynamically created -->
    </div>
    
    <!-- Quadrant Guide and Legend positioned below x-axis -->
    <div class="-mt-1">
      <!-- Quadrant Guide -->
      <div class="text-center mb-2">
        <button id="quadrant-guide-toggle" class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
          <span>Quadrant Guide</span>
          <svg id="quadrant-chevron" class="w-3 h-3 ml-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
      </div>

      <!-- Collapsible Quadrant Definitions -->
      <div id="quadrant-definitions" class="mb-2 hidden">
        <div class="max-w-3xl mx-auto grid grid-cols-2 gap-2 text-xs justify-items-center">
          <div class="flex items-center space-x-2">
            <div class="w-2.5 h-2.5 bg-purple-500/20 border border-purple-300 rounded"></div>
            <span class="text-gray-600 dark:text-gray-400"><strong>Ambitious Challengers</strong>: Emerging + broad scope</span>
          </div>
          <div class="flex items-center space-x-2">
            <div class="w-2.5 h-2.5 bg-green-500/20 border border-green-300 rounded"></div>
            <span class="text-gray-600 dark:text-gray-400"><strong>Market Leaders</strong>: High maturity + broad scope</span>
          </div>
          <div class="flex items-center space-x-2">
            <div class="w-2.5 h-2.5 bg-orange-500/20 border border-orange-300 rounded"></div>
            <span class="text-gray-600 dark:text-gray-400"><strong>Niche Players</strong>: Emerging + focused scope</span>
          </div>
          <div class="flex items-center space-x-2">
            <div class="w-2.5 h-2.5 bg-blue-500/20 border border-blue-300 rounded"></div>
            <span class="text-gray-600 dark:text-gray-400"><strong>Specialists</strong>: High maturity + focused scope</span>
          </div>
        </div>
      </div>

      <!-- Category Legend -->
      <div class="flex flex-wrap gap-4 justify-center text-xs mt-5">
        <div class="flex items-center space-x-1.5">
          <div class="w-2.5 h-2.5 rounded-full bg-purple-500"></div>
          <span class="font-medium text-gray-700 dark:text-gray-300">Payment Giants</span>
        </div>
        <div class="flex items-center space-x-1.5">
          <div class="w-2.5 h-2.5 rounded-full bg-blue-500"></div>
          <span class="font-medium text-gray-700 dark:text-gray-300">Marketplaces</span>
        </div>
        <div class="flex items-center space-x-1.5">
          <div class="w-2.5 h-2.5 rounded-full bg-green-500"></div>
          <span class="font-medium text-gray-700 dark:text-gray-300">Browsers/Agents</span>
        </div>
        <div class="flex items-center space-x-1.5">
          <div class="w-2.5 h-2.5 rounded-full bg-amber-500"></div>
          <span class="font-medium text-gray-700 dark:text-gray-300">Startups</span>
        </div>
        <div class="flex items-center space-x-1.5">
          <div class="w-2.5 h-2.5 rounded-full bg-pink-500"></div>
          <span class="font-medium text-gray-700 dark:text-gray-300">Checkout</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced Company Detail Modal -->
  <div id="company-modal" class="fixed inset-0 bg-black/60 backdrop-blur-sm hidden z-50 flex items-center justify-center p-4 transition-all duration-300">
    <div class="bg-white dark:bg-gray-800 rounded-3xl max-w-lg w-full shadow-2xl border border-gray-200/50 dark:border-gray-700/50 overflow-hidden transform transition-all duration-300 scale-95 opacity-0 modal-content">
      <!-- Modal Header -->
      <div class="bg-gradient-to-r from-gray-50 to-white dark:from-gray-800 dark:to-gray-750 px-6 py-4 border-b border-gray-200/50 dark:border-gray-700/50">
        <div class="flex justify-between items-start">
          <h5 id="modal-title" class="text-xl font-bold text-gray-900 dark:text-white"></h5>
          <button id="modal-close" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg p-2 transition-colors duration-200">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
      <!-- Modal Body -->
      <div id="modal-content" class="p-6 max-h-96 overflow-y-auto space-y-4">
        <!-- Content will be dynamically inserted -->
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ companies }}>
  // Import D3.js
  import('https://cdn.skypack.dev/d3@7').then(d3 => {
    
    const margin = { top: 40, right: 60, bottom: 40, left: 120 };
    const width = 900 - margin.left - margin.right;
    const height = 450 - margin.bottom - margin.top;

    // Create SVG first
    const svg = d3.select('#competitive-landscape-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom);

    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);

    // Create gradients for bubbles
    const defs = svg.append('defs');

    
    const categories = ['payments', 'marketplaces', 'browsers', 'startups', 'checkout'];
    const gradientColors = {
      'payments': ['#8B5CF6', '#A78BFA'],
      'marketplaces': ['#3B82F6', '#60A5FA'], 
      'browsers': ['#10B981', '#34D399'],
      'startups': ['#F59E0B', '#FBBF24'],
      'checkout': ['#EC4899', '#F472B6']
    };

    categories.forEach(category => {
      const gradient = defs.append('linearGradient')
        .attr('id', `gradient-${category}`)
        .attr('x1', '0%').attr('y1', '0%')
        .attr('x2', '100%').attr('y2', '100%');
      
      gradient.append('stop')
        .attr('offset', '0%')
        .attr('stop-color', gradientColors[category][0])
        .attr('stop-opacity', 1);
      
      gradient.append('stop')
        .attr('offset', '100%')
        .attr('stop-color', gradientColors[category][1])
        .attr('stop-opacity', 0.8);
    });


    // Add subtle background pattern
    const pattern = defs.append('pattern')
      .attr('id', 'backgroundPattern')
      .attr('patternUnits', 'userSpaceOnUse')
      .attr('width', 40)
      .attr('height', 40);
    
    pattern.append('circle')
      .attr('cx', 20)
      .attr('cy', 20)
      .attr('r', 1)
      .attr('fill', '#f1f5f9')
      .attr('opacity', 0.3);

    // Add background rectangle
    g.append('rect')
      .attr('width', width)
      .attr('height', height)
      .attr('fill', 'url(#backgroundPattern)')
      .attr('opacity', 0.5);

    // Scales
    const xScale = d3.scaleLinear()
      .domain([0, 10])
      .range([0, width]);

    const yScale = d3.scaleLinear()
      .domain([0, 10])
      .range([height, 0]);

    const sizeScale = d3.scaleSqrt()
      .domain([0, d3.max(companies, d => d.size)])
      .range([12, 28]);

    // Add some jitter to prevent exact overlaps
    function addJitter(companies) {
      return companies.map(d => ({
        ...d,
        originalMaturity: d.maturity,
        originalScope: d.scope,
        maturity: d.maturity + (Math.random() - 0.5) * 0.3,
        scope: d.scope + (Math.random() - 0.5) * 0.3
      }));
    }

    // Enhanced grid lines with subtle styling
    g.append('g')
      .attr('class', 'grid')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(xScale)
        .tickSize(-height)
        .tickFormat('')
        .ticks(5)
      )
      .selectAll('line')
      .style('stroke', 'url(#gridGradient)')
      .style('stroke-width', 1)
      .style('opacity', 0.4);

    g.append('g')
      .attr('class', 'grid')
      .call(d3.axisLeft(yScale)
        .tickSize(-width)
        .tickFormat('')
        .ticks(5)
      )
      .selectAll('line')
      .style('stroke', 'url(#gridGradient)')
      .style('stroke-width', 1)
      .style('opacity', 0.4);

    // Add gradient for grid lines
    const gridGradient = defs.append('linearGradient')
      .attr('id', 'gridGradient')
      .attr('x1', '0%').attr('y1', '0%')
      .attr('x2', '100%').attr('y2', '0%');
    
    gridGradient.append('stop')
      .attr('offset', '0%')
      .attr('stop-color', '#e2e8f0')
      .attr('stop-opacity', 0.2);
    
    gridGradient.append('stop')
      .attr('offset', '50%')
      .attr('stop-color', '#cbd5e1')
      .attr('stop-opacity', 0.8);
    
    gridGradient.append('stop')
      .attr('offset', '100%')
      .attr('stop-color', '#e2e8f0')
      .attr('stop-opacity', 0.2);

    // Add matrix dividing lines
    g.append('line')
      .attr('class', 'matrix-divider')
      .attr('x1', width / 2)
      .attr('y1', 0)
      .attr('x2', width / 2)
      .attr('y2', height)
      .style('stroke', '#8B5CF6')
      .style('stroke-width', 2)
      .style('stroke-dasharray', '8,4')
      .style('opacity', 0.6);

    g.append('line')
      .attr('class', 'matrix-divider')
      .attr('x1', 0)
      .attr('y1', height / 2)
      .attr('x2', width)
      .attr('y2', height / 2)
      .style('stroke', '#8B5CF6')
      .style('stroke-width', 2)
      .style('stroke-dasharray', '8,4')
      .style('opacity', 0.6);

    // Add subtle matrix cell backgrounds
    const matrixCells = [
      { x: 0, y: 0, width: width/2, height: height/2, color: '#8B5CF6', opacity: 0.05, title: 'Ambitious Challengers', titleColor: '#7C3AED' }, // Top-left: Low Maturity, High Scope
      { x: width/2, y: 0, width: width/2, height: height/2, color: '#10B981', opacity: 0.05, title: 'Market Leaders', titleColor: '#059669' }, // Top-right: High Maturity, High Scope
      { x: 0, y: height/2, width: width/2, height: height/2, color: '#F59E0B', opacity: 0.05, title: 'Niche Players', titleColor: '#D97706' }, // Bottom-left: Low Maturity, Low Scope
      { x: width/2, y: height/2, width: width/2, height: height/2, color: '#3B82F6', opacity: 0.05, title: 'Specialists', titleColor: '#2563EB' } // Bottom-right: High Maturity, Low Scope
    ];

    g.selectAll('.matrix-cell')
      .data(matrixCells)
      .enter()
      .append('rect')
      .attr('class', 'matrix-cell')
      .attr('x', d => d.x)
      .attr('y', d => d.y)
      .attr('width', d => d.width)
      .attr('height', d => d.height)
      .attr('fill', d => d.color)
      .attr('opacity', d => d.opacity);

    // Add matrix cell titles
    g.selectAll('.matrix-title')
      .data(matrixCells)
      .enter()
      .append('text')
      .attr('class', 'matrix-title')
      .attr('x', d => d.x + d.width/2)
      .attr('y', d => d.y + 20)
      .style('text-anchor', 'middle')
      .style('font-size', '14px')
      .style('font-weight', '700')
      .style('font-family', 'Inter, system-ui, sans-serif')
      .style('fill', d => d.titleColor)
      .style('opacity', 0.8)
      .text(d => d.title);

    // X Axis with labels
    const xAxis = g.append('g')
      .attr('class', 'x-axis')
      .attr('transform', `translate(0,${height})`)
      .call(d3.axisBottom(xScale)
        .ticks(5)
        .tickFormat(d => {
          if (d === 0) return 'Emerging';
          if (d === 2.5) return '';
          if (d === 5) return '';
          if (d === 7.5) return '';
          if (d === 10) return 'Mature';
          return '';
        })
      );

    xAxis.selectAll('text')
      .style('font-size', '13px')
      .style('fill', '#4b5563')
      .style('font-weight', '600');

    xAxis.selectAll('line')
      .style('stroke', '#9ca3af');

    xAxis.select('.domain')
      .style('stroke', '#9ca3af');

    // Y Axis with labels
    const yAxis = g.append('g')
      .attr('class', 'y-axis')
      .call(d3.axisLeft(yScale)
        .ticks(5)
        .tickFormat(d => {
          if (d === 0) return 'Focused';
          if (d === 2.5) return '';
          if (d === 5) return '';
          if (d === 7.5) return '';
          if (d === 10) return 'Broad';
          return '';
        })
      );

    yAxis.selectAll('text')
      .style('font-size', '13px')
      .style('fill', '#4b5563')
      .style('font-weight', '600');

    yAxis.selectAll('line')
      .style('stroke', '#9ca3af');

    yAxis.select('.domain')
      .style('stroke', '#9ca3af');

    // X Axis Title
    g.append('text')
      .attr('class', 'x-axis-title')
      .attr('x', width / 2)
      .attr('y', height + 20)
      .style('text-anchor', 'middle')
      .style('font-size', '16px')
      .style('font-weight', '700')
      .style('font-family', 'Inter, system-ui, sans-serif')
      .style('fill', '#1f2937')
      .text('Market Maturity →');

    // Y Axis Title
    g.append('text')
      .attr('class', 'y-axis-title')
      .attr('transform', 'rotate(-90)')
      .attr('y', -80)
      .attr('x', -height / 2)
      .style('text-anchor', 'middle')
      .style('font-size', '16px')
      .style('font-weight', '700')
      .style('font-family', 'Inter, system-ui, sans-serif')
      .style('fill', '#1f2937')
      .text('← Capability Scope');


    // Create tooltip
    const tooltip = d3.select('body').append('div')
      .attr('class', 'absolute bg-gray-900 text-white text-xs rounded-lg px-3 py-2 pointer-events-none opacity-0 z-10 max-w-sm')
      .style('transition', 'opacity 0.2s');

    let currentFilter = 'all';

    // Draw bubbles
    function updateChart() {
      const filteredCompanies = currentFilter === 'all' 
        ? addJitter(companies)
        : addJitter(companies.filter(d => d.category === currentFilter));

      const bubbles = g.selectAll('.bubble')
        .data(filteredCompanies, d => d.id);

      // Remove old bubbles
      bubbles.exit().remove();

      // Add new bubbles with enhanced gradient effect
      const bubblesEnter = bubbles.enter()
        .append('circle')
        .attr('class', 'bubble')
        .attr('cx', d => xScale(d.maturity))
        .attr('cy', d => yScale(d.scope))
        .attr('r', 0)
        .attr('fill', d => `url(#gradient-${d.category})`)
        .attr('stroke', '#ffffff')
        .attr('stroke-width', 3)
        .style('cursor', 'pointer')
        .style('opacity', 0.95)
        .style('filter', 'drop-shadow(0 4px 12px rgba(0,0,0,0.2)) drop-shadow(0 2px 4px rgba(0,0,0,0.1))');

      // Update all bubbles
      bubbles.merge(bubblesEnter)
        .transition()
        .duration(750)
        .attr('cx', d => xScale(d.maturity))
        .attr('cy', d => yScale(d.scope))
        .attr('r', d => sizeScale(d.size));

      // Add company name labels
      const labels = g.selectAll('.company-label')
        .data(filteredCompanies, d => d.id);

      // Remove old labels
      labels.exit().remove();

      // Add new labels with better formatting
      const labelsEnter = labels.enter()
        .append('text')
        .attr('class', 'company-label')
        .attr('x', d => xScale(d.maturity))
        .attr('y', d => yScale(d.scope) + 5)
        .style('text-anchor', 'middle')
        .style('dominant-baseline', 'middle')
        .style('font-size', d => {
          const size = sizeScale(d.size);
          if (size > 30) return '13px';
          if (size > 25) return '12px';
          if (size > 20) return '11px';
          if (size > 15) return '10px';
          return '9px';
        })
        .style('font-weight', '700')
        .style('font-family', 'Inter, system-ui, sans-serif')
        .style('fill', 'white')
        .style('pointer-events', 'none')
        .style('text-shadow', '0 1px 3px rgba(0,0,0,0.9), 0 0 6px rgba(0,0,0,0.5)')
        .style('opacity', 0)
        .text(d => {
          // Smart text truncation based on bubble size
          const size = sizeScale(d.size);
          let name = d.name;
          
          if (size < 16) {
            // Very small bubbles - just first word or abbreviation
            if (name.includes(' ')) {
              return name.split(' ')[0];
            }
            return name.length > 5 ? name.substring(0, 4) + '…' : name;
          } else if (size < 22) {
            // Medium bubbles - truncate long names
            return name.length > 8 ? name.substring(0, 7) + '…' : name;
          } else if (size < 28) {
            // Large bubbles - allow longer names
            return name.length > 12 ? name.substring(0, 11) + '…' : name;
          }
          
          // Very large bubbles - full name
          return name;
        });

      // Update all labels
      labels.merge(labelsEnter)
        .transition()
        .duration(750)
        .attr('x', d => xScale(d.maturity))
        .attr('y', d => yScale(d.scope) + 5)
        .style('opacity', 0.95);

      // Add interactions to all bubbles (both new and existing)
      const allBubbles = g.selectAll('.bubble');
      
      allBubbles.on('mouseover', function(event, d) {
          // Highlight the hovered bubble with enhanced effects
          d3.select(this)
            .transition()
            .duration(200)
            .attr('r', d => sizeScale(d.size) * 1.3)
            .style('opacity', 1)
            .style('filter', 'drop-shadow(0 8px 24px rgba(0,0,0,0.3)) drop-shadow(0 4px 8px rgba(0,0,0,0.15))')
            .attr('stroke-width', 4);

          // Highlight the corresponding label
          g.selectAll('.company-label')
            .filter(label => label.id === d.id)
            .transition()
            .duration(200)
            .style('font-size', d => {
              const size = sizeScale(d.size) * 1.2;
              if (size > 30) return '13px';
              if (size > 25) return '12px';
              if (size > 20) return '11px';
              return '10px';
            })
            .style('opacity', 1);

          // Dim other elements
          g.selectAll('.bubble')
            .filter(bubble => bubble.id !== d.id)
            .transition()
            .duration(200)
            .style('opacity', 0.3);

          g.selectAll('.company-label')
            .filter(label => label.id !== d.id)
            .transition()
            .duration(200)
            .style('opacity', 0.3);

          tooltip
            .style('opacity', 1)
            .html(`
              <div class="font-semibold">${d.name}</div>
              <div class="text-xs mt-1">${d.description}</div>
              <div class="text-xs mt-1 text-gray-300">Click for details</div>
            `)
            .style('left', (event.pageX + 10) + 'px')
            .style('top', (event.pageY - 10) + 'px');
        })
        .on('mouseout', function() {
          // Reset all elements
          g.selectAll('.bubble')
            .transition()
            .duration(200)
            .attr('r', d => sizeScale(d.size))
            .style('opacity', 0.95)
            .style('filter', 'drop-shadow(0 4px 12px rgba(0,0,0,0.2)) drop-shadow(0 2px 4px rgba(0,0,0,0.1))')
            .attr('stroke-width', 3);

          g.selectAll('.company-label')
            .transition()
            .duration(200)
            .style('font-size', d => {
              const size = sizeScale(d.size);
              if (size > 30) return '13px';
              if (size > 25) return '12px';
              if (size > 20) return '11px';
              if (size > 15) return '10px';
              return '9px';
            })
            .style('opacity', 0.95);

          tooltip.style('opacity', 0);
        })
        .on('click', function(_, d) {
          console.log('Bubble clicked:', d.name); // Debug log
          showModal(d);
        });
    }

    // Filter functionality
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        // Update active state
        document.querySelectorAll('.filter-btn').forEach(b => {
          b.classList.remove('active', 'bg-umai-accent', 'text-white');
          b.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
        });
        
        this.classList.add('active', 'bg-umai-accent', 'text-white');
        this.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');

        // Update filter
        currentFilter = this.id.replace('filter-', '');
        updateChart();
      });
    });

    // Modal functionality
    function showModal(company) {
      console.log('showModal called with:', company); // Debug log
      const modal = document.getElementById('company-modal');
      const title = document.getElementById('modal-title');
      const content = document.getElementById('modal-content');
      const modalContentDiv = modal.querySelector('.modal-content');

      if (!modal || !title || !content) {
        console.error('Modal elements not found');
        return;
      }

      title.textContent = company.name;
      
      content.innerHTML = `
        <div class="space-y-3">
          <p class="text-sm text-gray-700 dark:text-gray-300">${company.description}</p>
          
          <div class="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span class="font-medium text-gray-900 dark:text-white">Category:</span>
              <span class="text-gray-600 dark:text-gray-400 capitalize"> ${company.category}</span>
            </div>
            <div>
              <span class="font-medium text-gray-900 dark:text-white">Status:</span>
              <span class="text-gray-600 dark:text-gray-400 capitalize"> ${company.status}</span>
            </div>
            ${company.founded ? `
            <div>
              <span class="font-medium text-gray-900 dark:text-white">Founded:</span>
              <span class="text-gray-600 dark:text-gray-400"> ${company.founded}</span>
            </div>
            ` : ''}
            ${company.funding ? `
            <div>
              <span class="font-medium text-gray-900 dark:text-white">Funding:</span>
              <span class="text-gray-600 dark:text-gray-400"> ${company.funding}</span>
            </div>
            ` : ''}
          </div>
          
          ${company.keyMetrics && company.keyMetrics.length > 0 ? `
          <div>
            <h6 class="font-medium text-gray-900 dark:text-white mb-2">Key Metrics:</h6>
            <ul class="text-sm text-gray-600 dark:text-gray-400 space-y-1">
              ${company.keyMetrics.map(metric => `<li>• ${metric}</li>`).join('')}
            </ul>
          </div>
          ` : ''}
        </div>
      `;

      // Show modal with animation
      modal.classList.remove('hidden');
      if (modalContentDiv) {
        modalContentDiv.classList.remove('scale-95', 'opacity-0');
        modalContentDiv.classList.add('scale-100', 'opacity-100');
      }
    }

    // Close modal functionality
    function closeModal() {
      const modal = document.getElementById('company-modal');
      const modalContentDiv = modal.querySelector('.modal-content');
      
      if (modalContentDiv) {
        modalContentDiv.classList.remove('scale-100', 'opacity-100');
        modalContentDiv.classList.add('scale-95', 'opacity-0');
      }
      
      setTimeout(() => {
        modal.classList.add('hidden');
      }, 150);
    }

    // Close modal
    document.getElementById('modal-close').addEventListener('click', closeModal);

    // Close modal on backdrop click
    document.getElementById('company-modal').addEventListener('click', (e) => {
      if (e.target.id === 'company-modal') {
        closeModal();
      }
    });

    // Initial chart render
    updateChart();
  });

  // Quadrant guide toggle functionality
  document.getElementById('quadrant-guide-toggle').addEventListener('click', function() {
    const definitions = document.getElementById('quadrant-definitions');
    const chevron = document.getElementById('quadrant-chevron');
    
    if (definitions.classList.contains('hidden')) {
      definitions.classList.remove('hidden');
      chevron.style.transform = 'rotate(180deg)';
    } else {
      definitions.classList.add('hidden');
      chevron.style.transform = 'rotate(0deg)';
    }
  });
</script>