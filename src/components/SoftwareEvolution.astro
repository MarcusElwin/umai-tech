---
export interface Props {
  title?: string;
  eras: Array<{
    version: string;
    name: string;
    period: string;
    paradigm: string;
    inputOutput: {
      inputs: string[];
      process: string;
      output: string;
    };
    characteristics: string[];
    examples: string[];
    testingApproach: string[];
    keyInnovation: string;
    color: string;
  }>;
}

const { title = "The Evolution of Software Engineering", eras } = Astro.props;

// Function to get era colors
function getEraColor(color: string) {
  const colors = {
    'blue': '#3B82F6',
    'purple': '#8B5CF6', 
    'green': '#10B981',
    'orange': '#F59E0B',
    'red': '#EF4444',
    'indigo': '#6366F1'
  };
  return colors[color as keyof typeof colors] || '#6B7280';
}

// Function to get era icons
function getEraIcon(version: string) {
  const icons = {
    '1.0': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>',
    '2.0': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>',
    '3.0': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>',
    '4.0': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>'
  };
  return icons[version as keyof typeof icons] || '<circle cx="12" cy="12" r="3"/>';
}
---

<div class="software-evolution-container my-8">
  <!-- Title -->
  {title && (
    <div class="mb-6">
      <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 flex items-center gap-2">
        <div class="w-1 h-5 bg-purple-500 rounded-full"></div>
        {title}
      </h3>
    </div>
  )}

  <!-- Condensed Timeline with Expandable Details -->
  <div class="relative">
    <!-- Timeline Line -->
    <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-blue-500 via-purple-500 via-green-500 to-orange-500"></div>
    
    <!-- Era Cards -->
    <div class="space-y-4">
      {eras.map((era, index) => {
        const eraId = `era-${era.version.replace('.', '-')}`;
        return (
          <div class="era-card relative">
            <!-- Timeline Dot -->
            <div class="absolute left-6 flex items-center justify-center w-4 h-4 rounded-full border-4 border-white dark:border-gray-900 z-10" style={`background-color: ${getEraColor(era.color)}`}></div>
            
            <!-- Condensed Header -->
            <button 
              class="era-toggle w-full ml-16 p-4 rounded-xl border border-gray-200/60 bg-gradient-to-br from-white via-gray-50/30 to-white dark:from-gray-900/80 dark:via-gray-800/50 dark:to-gray-900/80 dark:border-gray-700/40 shadow-sm hover:shadow-md transition-all duration-300 text-left"
              data-era={eraId}
              aria-expanded="false"
            >
              <div class="flex items-center justify-between">
                <!-- Left: Era Info -->
                <div class="flex items-center gap-4">
                  <div class="flex items-center justify-center w-12 h-12 rounded-xl text-white shadow-lg" style={`background: linear-gradient(135deg, ${getEraColor(era.color)}, ${getEraColor(era.color)}cc)`}>
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <Fragment set:html={getEraIcon(era.version)} />
                    </svg>
                  </div>
                  <div>
                    <div class="flex items-center gap-3 mb-1">
                      <h4 class="text-lg font-bold text-gray-900 dark:text-gray-100">Software {era.version}</h4>
                      <span class="px-2 py-1 rounded-md text-xs font-semibold text-white" style={`background-color: ${getEraColor(era.color)}`}>
                        {era.period}
                      </span>
                    </div>
                    <h5 class="text-sm text-gray-700 dark:text-gray-300 font-semibold">{era.name}</h5>
                    <p class="text-xs text-gray-500 dark:text-gray-400 italic mt-1">"{era.paradigm}"</p>
                  </div>
                </div>
                
                <!-- Right: Key Innovation + Chevron -->
                <div class="flex items-center gap-4">
                  <div class="text-right max-w-xs">
                    <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">{era.keyInnovation}</p>
                  </div>
                  <svg class="w-5 h-5 text-gray-400 transition-transform duration-200 era-chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>
            </button>

            <!-- Expandable Detailed Content -->
            <div class="era-details hidden ml-16 mt-2" data-era={eraId}>
              <div class="p-6 rounded-xl border border-gray-200/40 dark:border-gray-700/30 bg-gray-50/30 dark:bg-gray-800/20">
                
                <!-- Input/Output Flow -->
                <div class="mb-6 p-4 rounded-lg border border-gray-200/40 dark:border-gray-700/30 bg-white/60 dark:bg-gray-800/40">
                  <h6 class="text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wide mb-3">Core Paradigm</h6>
                  <div class="flex items-center gap-4 text-sm flex-wrap">
                    <!-- Inputs -->
                    <div class="flex gap-2">
                      {era.inputOutput.inputs.map((input) => (
                        <div class="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 shadow-sm">
                          <div class="w-1.5 h-1.5 rounded-full" style={`background-color: ${getEraColor(era.color)}`}></div>
                          <span class="font-medium text-gray-900 dark:text-gray-100 text-xs">{input}</span>
                        </div>
                      ))}
                    </div>
                    
                    <!-- Arrow -->
                    <div class="flex items-center gap-2">
                      <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                      </svg>
                      <span class="text-xs text-gray-500 font-medium">{era.inputOutput.process}</span>
                    </div>
                    
                    <!-- Output -->
                    <div class="px-3 py-2 rounded-lg border-2 border-dashed" style={`border-color: ${getEraColor(era.color)}; background-color: ${getEraColor(era.color)}10`}>
                      <span class="font-bold text-gray-900 dark:text-gray-100 text-sm">{era.inputOutput.output}</span>
                    </div>
                  </div>
                </div>

                <!-- Two Column Layout -->
                <div class="grid md:grid-cols-2 gap-6">
                  <!-- Left: Characteristics + Examples -->
                  <div class="space-y-4">
                    <div>
                      <h6 class="text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wide mb-2">Characteristics</h6>
                      <div class="flex flex-wrap gap-2">
                        {era.characteristics.slice(0, 3).map((char) => (
                          <span class="inline-flex items-center px-2 py-1 rounded-md text-xs border" style={`background-color: ${getEraColor(era.color)}15; border-color: ${getEraColor(era.color)}30; color: ${getEraColor(era.color)}`}>
                            {char}
                          </span>
                        ))}
                        {era.characteristics.length > 3 && (
                          <span class="text-xs text-gray-500">+{era.characteristics.length - 3} more</span>
                        )}
                      </div>
                    </div>
                    
                    <div>
                      <h6 class="text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wide mb-2">Examples</h6>
                      <div class="flex flex-wrap gap-2">
                        {era.examples.slice(0, 4).map((example) => (
                          <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                            {example}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  <!-- Right: Testing Approach -->
                  <div>
                    <h6 class="text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wide mb-2">Testing Approach</h6>
                    <ul class="space-y-1">
                      {era.testingApproach.slice(0, 4).map((test) => (
                        <li class="flex items-start gap-2 text-sm text-gray-700 dark:text-gray-300">
                          <div class="w-1 h-1 rounded-full mt-2 flex-shrink-0" style={`background-color: ${getEraColor(era.color)}`}></div>
                          <span>{test}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</div>

<script>
  // Era accordion functionality
  document.addEventListener('DOMContentLoaded', function() {
    const eraToggles = document.querySelectorAll('.era-toggle') as NodeListOf<HTMLButtonElement>;
    
    eraToggles.forEach((toggle: HTMLButtonElement) => {
      toggle.addEventListener('click', function() {
        const eraId = this.getAttribute('data-era');
        const details = document.querySelector(`.era-details[data-era="${eraId}"]`) as HTMLElement;
        const chevron = this.querySelector('.era-chevron') as HTMLElement;
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        
        if (details && chevron) {
          if (isExpanded) {
            // Collapse
            details.style.maxHeight = details.scrollHeight + 'px';
            details.offsetHeight; // Force reflow
            details.style.maxHeight = '0';
            details.style.opacity = '0';
            
            setTimeout(() => {
              details.classList.add('hidden');
            }, 300);
            
            chevron.style.transform = 'rotate(0deg)';
            this.setAttribute('aria-expanded', 'false');
          } else {
            // Expand
            details.classList.remove('hidden');
            details.style.maxHeight = '0';
            details.style.opacity = '0';
            
            // Get the full height
            const fullHeight = details.scrollHeight;
            
            setTimeout(() => {
              details.style.maxHeight = fullHeight + 'px';
              details.style.opacity = '1';
            }, 10);
            
            // Reset max-height after transition
            setTimeout(() => {
              details.style.maxHeight = 'none';
            }, 300);
            
            chevron.style.transform = 'rotate(180deg)';
            this.setAttribute('aria-expanded', 'true');
          }
        }
      });
    });
    
    // Add smooth transitions to all era details
    const eraDetails = document.querySelectorAll('.era-details') as NodeListOf<HTMLElement>;
    eraDetails.forEach((details: HTMLElement) => {
      details.style.transition = 'max-height 0.3s ease-out, opacity 0.3s ease-out';
      details.style.overflow = 'hidden';
      details.style.maxHeight = '0';
      details.style.opacity = '0';
    });
  });
</script>